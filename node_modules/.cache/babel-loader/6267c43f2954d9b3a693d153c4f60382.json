{"ast":null,"code":"/**\n * @remix-run/router v0.2.0-pre.4\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _globalHistory$state, _globalHistory$state2;\n\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state = globalHistory.state) == null ? void 0 : _globalHistory$state.usr) || null, ((_globalHistory$state2 = globalHistory.state) == null ? void 0 : _globalHistory$state2.key) || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _globalHistory$state3, _globalHistory$state4;\n\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state3 = globalHistory.state) == null ? void 0 : _globalHistory$state3.usr) || null, ((_globalHistory$state4 = globalHistory.state) == null ? void 0 : _globalHistory$state4.key) || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to == null ? void 0 : to.key) || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.cancelled = false;\n    this.subscriber = undefined;\n    this.data = {};\n    Object.entries(data).forEach(_ref => {\n      let [key, value] = _ref; // Store all data in our internal copy and track promise keys\n\n      this.data[key] = value;\n\n      if (value instanceof Promise) {\n        this.pendingKeys.add(key);\n        value.then(data => this.onSettle(key, null, data), error => this.onSettle(key, error));\n      }\n    });\n  }\n\n  onSettle(key, error, data) {\n    var _this$subscriber;\n\n    if (this.cancelled) {\n      return;\n    }\n\n    this.pendingKeys.delete(key);\n    let value = error ? new DeferredError(error) : data;\n    this.data[key] = value;\n    (_this$subscriber = this.subscriber) == null ? void 0 : _this$subscriber.call(this, false, key, value);\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    var _this$subscriber2;\n\n    this.cancelled = true;\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    (_this$subscriber2 = this.subscriber) == null ? void 0 : _this$subscriber2.call(this, true);\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n}\n/**\n * @private\n * Utility class we use to hold deferred promise rejection values\n */\n\n\nclass DeferredError extends Error {}\n/**\n * Check if the given error is a DeferredError generated from a deferred()\n * promise rejection\n */\n\n\nfunction isDeferredError(e) {\n  return e instanceof DeferredError;\n}\n\nfunction deferred(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var _init$hydrationData, _init$hydrationData2, _init$hydrationData4, _init$hydrationData5, _init$hydrationData6;\n\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to use Data Routers\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided function to call on all state changes\n\n  let subscriber = null; // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  } // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n\n\n  let foundMissingHydrationData = ((_init$hydrationData = init.hydrationData) == null ? void 0 : _init$hydrationData.errors) == null && ((_init$hydrationData2 = init.hydrationData) == null ? void 0 : _init$hydrationData2.loaderData) != null && initialMatches.filter(m => m.route.loader).some(m => {\n    var _init$hydrationData3, _init$hydrationData3$;\n\n    return ((_init$hydrationData3 = init.hydrationData) == null ? void 0 : (_init$hydrationData3$ = _init$hydrationData3.loaderData) == null ? void 0 : _init$hydrationData3$[m.route.id]) === undefined;\n  });\n\n  if (foundMissingHydrationData) {\n    console.warn(\"The provided hydration data did not find loaderData for all matched \" + \"routes with loaders.  Performing a full initial data load\");\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null && !foundMissingHydrationData;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData ? {} : ((_init$hydrationData4 = init.hydrationData) == null ? void 0 : _init$hydrationData4.loaderData) || {},\n    actionData: ((_init$hydrationData5 = init.hydrationData) == null ? void 0 : _init$hydrationData5.actionData) || null,\n    errors: ((_init$hydrationData6 = init.hydrationData) == null ? void 0 : _init$hydrationData6.errors) || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = null; // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n\n  let pendingResetScroll = true; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns deferred() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    var _pendingNavigationCon;\n\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscriber = null;\n    (_pendingNavigationCon = pendingNavigationController) == null ? void 0 : _pendingNavigationCon.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscriber == null ? void 0 : subscriber(state);\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(historyAction, location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll\n    }));\n    if (isUninterruptedRevalidation) ;else if (historyAction === Action.Pop) ;else if (historyAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(path, opts) {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error\n    } = normalizeNavigateOptions(typeof path === \"string\" ? parsePath(path) : path, opts);\n    let location = createLocation(state.location, normalizedPath, opts == null ? void 0 : opts.state);\n    let historyAction = (opts == null ? void 0 : opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let resetScroll = opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts == null ? void 0 : opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true; // Cancel all pending deferred on revalidations and mark cancelled routes\n    // for revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    var _pendingNavigationCon2; // Abort any in-progress navigations and start a new one\n\n\n    (_pendingNavigationCon2 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon2.abort();\n    pendingAction = historyAction; // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n\n    isUninterruptedRevalidation = (opts == null ? void 0 : opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation\n\n    saveScrollPosition(state.location, state.matches); // Track whether we should reset scroll on completion\n\n    pendingResetScroll = (opts == null ? void 0 : opts.resetScroll) !== false;\n    let loadingNavigation = opts == null ? void 0 : opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches\n      });\n      return;\n    } // Call action if we received an action submission\n\n\n    let pendingActionData = null;\n    let pendingError = null;\n\n    if (opts != null && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts != null && opts.submission) {\n      let actionOutput = await handleAction(historyAction, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingError = actionOutput.pendingActionError || null;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(historyAction, location, opts == null ? void 0 : opts.submission, matches, loadingNavigation, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(historyAction, location, submission, matches, opts) {\n    isRevalidationRequired = true; // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort any in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_ref2, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n\n    if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(location.search)) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    } // Put us in a submitting state\n\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = matches.slice(-1)[0];\n\n    if (!actionMatch.route.action) {\n      console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + createHref(location) + \"]\"));\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + createHref(location) + \"]\")\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n      result = await callLoaderOrAction(actionMatch, location, actionAbortController.signal, submission);\n\n      if (actionAbortController.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      } // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n\n\n      pendingNavigationController = null;\n    } // If the action threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission); // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n\n\n      let isPush = (opts == null ? void 0 : opts.replace) !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(historyAction, location, submission, matches, overrideNavigation, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds that are not being reused.  Note that if this\n    // is an acton reload we would have already cancelled all pending deferreds\n    // so this would be a no-op\n\n    cancelActiveDeferredsViaMatches(matches, matchesToLoad); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref3 => {\n        var _state$fetchers$get;\n\n        let [key] = _ref3;\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: (_state$fetchers$get = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    } // Start the data load\n\n\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.set(key, abortController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndResolveData(matchesToLoad, revalidatingFetchers, location, abortController.signal);\n\n    if (abortController.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach(_ref5 => {\n      let [key] = _ref5;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted, loaderDataKey, data) => {\n        if (aborted) {\n          activeDeferreds.delete(routeId);\n          return;\n        } // This will always be defined here, but TS doesn't know that\n\n\n        invariant(loaderDataKey, \"Missing loaderDataKey in subscribe\");\n        updateState({\n          loaderData: _extends({}, state.loaderData, {\n            [routeId]: _extends({}, state.loaderData[routeId], {\n              [loaderDataKey]: data\n            })\n          })\n        }); // Remove this instance if all promises have settled\n\n        if (deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    var _state$fetchers$get2;\n\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.set(key, IDLE_FETCHER);\n      updateState({\n        errors: {\n          [boundaryMatch.route.id]: new ErrorResponse(404, \"Not Found\", null)\n        },\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n\n    let match = matches[matches.length - 1].route.index && !hasNakedIndexQuery(parsePath(href).search || \"\") ? matches.slice(-2)[0] : matches.slice(-1)[0];\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: ((_state$fetchers$get2 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get2.data) || undefined\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, href, match, submission) {\n    var _state$fetchers$get3;\n\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key); // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort any in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_ref6, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    }); // Put this fetcher into it's submitting state\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: ((_state$fetchers$get3 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get3.data) || undefined\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(match, href, abortController.signal, submission);\n\n    if (abortController.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      deleteFetcher(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error\n        }\n      });\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, null, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref7 => {\n      let [staleKey] = _ref7;\n      return staleKey !== key;\n    }).forEach(_ref8 => {\n      var _state$fetchers$get4;\n\n      let [staleKey] = _ref8;\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: (_state$fetchers$get4 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get4.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndResolveData(matchesToLoad, revalidatingFetchers, nextLocation, abortController.signal);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref9 => {\n      let [staleKey] = _ref9;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, null, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      var _pendingNavigationCon3;\n\n      invariant(pendingAction, \"Expected pending action\");\n      (_pendingNavigationCon3 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon3.abort();\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, href, match, loadingFetcher) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [href, match]); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(match, href, abortController.signal); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, abortController.signal)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (abortController.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  } // Utility function to handle redirects returned from an action or loader\n\n\n  async function startRedirectNavigation(redirect, navigation, isPush) {\n    if (isPush === void 0) {\n      isPush = false;\n    }\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\");\n    await startNavigation(isPush ? Action.Push : Action.Replace, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndResolveData(matchesToLoad, fetchersToLoad, location, signal) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(m, location, signal)), ...fetchersToLoad.map(_ref10 => {\n      let [, href, match] = _ref10;\n      return callLoaderOrAction(match, href, signal);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await resolveDeferredResults(matchesToLoad, loaderResults, signal, state.loaderData, activeDeferreds);\n    await resolveDeferredResults(fetchersToLoad.map(_ref11 => {\n      let [,, match] = _ref11;\n      return match;\n    }), fetcherResults, signal);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Cancel active deferreds that are not reused, being reloaded, or below the\n  // boundary id\n\n\n  function cancelActiveDeferredsViaMatches(matches, matchesToLoad, boundaryId) {\n    let foundBoundaryId = false;\n    return cancelActiveDeferreds(routeId => {\n      foundBoundaryId = foundBoundaryId || routeId === boundaryId; // Can cancel if this route is no longer matched\n\n      let isRouteMatched = matches == null ? void 0 : matches.some(m => m.route.id === routeId); // Or if this route is about to be reloaded\n\n      let isRouteLoading = matchesToLoad == null ? void 0 : matchesToLoad.some(m => m.route.id === routeId);\n      return !isRouteMatched || isRouteLoading || foundBoundaryId;\n    });\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    let dataRoute = _extends({}, route, {\n      id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n\n    return dataRoute;\n  });\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: (opts == null ? void 0 : opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let searchParams = new URLSearchParams(path.search);\n\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n      };\n    }\n  }\n\n  return {\n    path: _extends({}, path, {\n      search: \"?\" + searchParams\n    })\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingError ? matches.findIndex(m => m.route.id === Object.keys(pendingError)[0]) : matches.length;\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n\n    return isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult);\n  }); // If revalidation is required, pick fetchers that qualify\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((_ref12, key) => {\n    let [href, match] = _ref12; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var _currentMatch$route$p;\n\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = // param change for this match, /users/123 -> /users/456\n  currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n  // e.g. /files/images/avatar.jpg -> files/finances.xls\n  ((_currentMatch$route$p = currentMatch.route.path) == null ? void 0 : _currentMatch$route$p.endsWith(\"*\")) && currentMatch.params[\"*\"] !== match.params[\"*\"] || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(match, location, signal, submission) {\n  let resultType;\n  let result;\n\n  try {\n    let type = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    var _result$headers$get; // Process redirects\n\n\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n\n    if ((_result$headers$get = result.headers.get(\"Content-Type\")) != null && _result$headers$get.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data)\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, submission) {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let {\n    formMethod,\n    formEncType,\n    formData\n  } = submission;\n  let body = formData; // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      body.append(key, value);\n    }\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body\n  });\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = null;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      });\n    } else if (isDeferredResult(result)) {\n      activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n    } else {\n      loaderData[id] = result.data;\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  } // Process results from our revalidating fetchers\n\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var _errors;\n\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!((_errors = errors) != null && _errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.errorElement) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result == null ? void 0 : result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(matchesToLoad, results, signal, currentLoaderData, activeDeferreds) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let id = matchesToLoad[index].route.id; // Not passing currentLoaderData means SSR and we always want to await there\n\n    if (isDeferredResult(result) && (!currentLoaderData || currentLoaderData[id] !== undefined)) {\n      activeDeferreds == null ? void 0 : activeDeferreds.set(id, result.deferredData);\n      await resolveDeferredData(result, signal).then(successResult => {\n        activeDeferreds == null ? void 0 : activeDeferreds.delete(id);\n\n        if (successResult) {\n          results[index] = successResult;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal) {\n  if (!result.deferredData.done) {\n    let onAbort = () => result.deferredData.cancel();\n\n    signal.addEventListener(\"abort\", onAbort);\n    let wasAborted = await new Promise(resolve => {\n      result.deferredData.subscribe(aborted => {\n        signal.removeEventListener(\"abort\", onAbort);\n\n        if (aborted || result.deferredData.done) {\n          resolve(aborted);\n        }\n      });\n    });\n\n    if (wasAborted) {\n      return;\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nconst _excluded = [\"initialEntries\", \"initialIndex\"],\n      _excluded2 = [\"window\"],\n      _excluded3 = [\"window\"];\n\nfunction createMemoryRouter(_ref) {\n  let {\n    initialEntries,\n    initialIndex\n  } = _ref,\n      routerInit = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  let history = createMemoryHistory({\n    initialEntries,\n    initialIndex\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nfunction createBrowserRouter(_ref2) {\n  let {\n    window\n  } = _ref2,\n      routerInit = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  let history = createBrowserHistory({\n    window\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nfunction createHashRouter(_ref3) {\n  let {\n    window\n  } = _ref3,\n      routerInit = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n  let history = createHashHistory({\n    window\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nexport { Action, IDLE_FETCHER, IDLE_NAVIGATION, createBrowserHistory, createBrowserRouter, createHashHistory, createHashRouter, createMemoryHistory, createMemoryRouter, createPath, createRouter, deferred, generatePath, getToPathname, invariant, isDeferredError, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;AACA;;AAEA;;AAEG;;;IACSA;;AAAZ,WAAYA,MAAZ,EAAkB;EAChB;;;;;;AAMG;EACHA;EAEA;;;;AAIG;;EACHA;EAEA;;;AAGG;;EACHA;AArBF,GAAYA,MAAM,KAANA,MAAM,GAsBjB,EAtBiB,CAAlB;;AAkKA,MAAMC,iBAAiB,GAAG,UAA1B;AA+BA;;;AAGG;;AACa,6BACdC,OADc,EACoB;EAAA,IAAlCA,OAAkC;IAAlCA,OAAkC,GAAF,EAAhCA;EAAkC;;EAElC,IAAI;IAAEC,cAAc,GAAG,CAAC,GAAD,CAAnB;IAA0BC,YAA1B;IAAwCC,QAAQ,GAAG;EAAnD,IAA6DH,OAAjE;EACA,IAAII,OAAJ,CAHkC;;EAIlCA,OAAO,GAAGH,cAAc,CAACI,GAAfJ,CAAmB,CAACK,KAAD,EAAQC,KAAR,KAC3BC,oBAAoB,CAACF,KAAD,EAAQ,IAAR,EAAcC,KAAK,KAAK,CAAVA,GAAc,SAAdA,GAA0BE,SAAxC,CADZR,CAAVG;EAGA,IAAIG,KAAK,GAAGG,UAAU,CACpBR,YAAY,IAAI,IAAhBA,GAAuBE,OAAO,CAACO,MAARP,GAAiB,CAAxCF,GAA4CA,YADxB,CAAtB;EAGA,IAAIU,MAAM,GAAGd,MAAM,CAACe,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;;EAEA,SAASJ,UAAT,CAAoBK,CAApB,EAA6B;IAC3B,OAAOC,IAAI,CAACC,GAALD,CAASA,IAAI,CAACE,GAALF,CAASD,CAATC,EAAY,CAAZA,CAATA,EAAyBZ,OAAO,CAACO,MAARP,GAAiB,CAA1CY,CAAP;EACD;;EACD,SAASG,kBAAT,GAA2B;IACzB,OAAOf,OAAO,CAACG,KAAD,CAAd;EACD;;EACD,SAASC,oBAAT,CACEY,EADF,EAEEC,KAFF,EAGEC,GAHF,EAGc;IAAA,IADZD,KACY;MADZA,KACY,GADC,IAAbA;IACY;;IAEZ,IAAIE,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGe,kBAAkB,GAAGM,QAAxB,GAAmC,GADf,EAE3BL,EAF2B,EAG3BC,KAH2B,EAI3BC,GAJ2B,CAA7B;IAMAI,SAAO,CACLH,QAAQ,CAACE,QAATF,CAAkBI,MAAlBJ,CAAyB,CAAzBA,MAAgC,GAD3B,+DAEsDK,IAAI,CAACC,SAALD,CACzDR,EADyDQ,CAFtD,CAAPF;IAMA,OAAOH,QAAP;EACD;;EAED,IAAIO,OAAO,GAAkB;IAC3B,IAAIvB,KAAJ,GAAS;MACP,OAAOA,KAAP;IAFyB;;IAI3B,IAAIK,MAAJ,GAAU;MACR,OAAOA,MAAP;IALyB;;IAO3B,IAAIW,QAAJ,GAAY;MACV,OAAOJ,kBAAkB,EAAzB;IARyB;;IAU3BY,UAAU,CAACX,EAAD,EAAG;MACX,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C;IAXyB;;IAa3Ba,IAAI,CAACb,EAAD,EAAKC,KAAL,EAAU;MACZT,MAAM,GAAGd,MAAM,CAACoC,IAAhBtB;MACA,IAAIuB,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC;MACAd,KAAK,IAAI,CAATA;MACAH,OAAO,CAACgC,MAARhC,CAAeG,KAAfH,EAAsBA,OAAO,CAACO,MAA9BP,EAAsC+B,YAAtC/B;;MACA,IAAID,QAAQ,IAAIW,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF;UAAUW,QAAQ,EAAEY;QAApB,CAAD,CAARrB;MACD;IApBwB;;IAsB3BuB,OAAO,CAACjB,EAAD,EAAKC,KAAL,EAAU;MACfT,MAAM,GAAGd,MAAM,CAACwC,OAAhB1B;MACA,IAAIuB,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC;MACAjB,OAAO,CAACG,KAAD,CAAPH,GAAiB+B,YAAjB/B;;MACA,IAAID,QAAQ,IAAIW,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF;UAAUW,QAAQ,EAAEY;QAApB,CAAD,CAARrB;MACD;IA5BwB;;IA8B3ByB,EAAE,CAACC,KAAD,EAAM;MACN5B,MAAM,GAAGd,MAAM,CAACe,GAAhBD;MACAL,KAAK,GAAGG,UAAU,CAACH,KAAK,GAAGiC,KAAT,CAAlBjC;;MACA,IAAIO,QAAJ,EAAc;QACZA,QAAQ,CAAC;UAAEF,MAAF;UAAUW,QAAQ,EAAEJ,kBAAkB;QAAtC,CAAD,CAARL;MACD;IAnCwB;;IAqC3B2B,MAAM,CAACC,EAAD,EAAa;MACjB5B,QAAQ,GAAG4B,EAAX5B;MACA,OAAO,MAAK;QACVA,QAAQ,GAAG,IAAXA;MADF;IAGD;;EA1C0B,CAA7B;EA6CA,OAAOgB,OAAP;AACD;AAkBD;;;;;;AAMG;;;AACa,8BACd9B,OADc,EACqB;EAAA,IAAnCA,OAAmC;IAAnCA,OAAmC,GAAF,EAAjCA;EAAmC;;EAEnC,SAAS2C,qBAAT,CACEC,MADF,EAEEC,aAFF,EAEkC;IAAA;;IAEhC,IAAI;MAAEpB,QAAF;MAAYqB,MAAZ;MAAoBC;IAApB,IAA6BH,MAAM,CAACrB,QAAxC;IACA,OAAOC,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYqB,MAAZ;MAAoBC;IAApB,CAFmB;IAInB,sCAAa,CAAC1B,KAAd,KAAqB2B,IAArB,GAAqBA,MAArB,GAAqBA,wBAArB,KAA4B,IAJT,EAKnB,uCAAa,CAAC3B,KAAdwB,2CAAqBvB,GAArB,KAA4B,SALT,CAArB;EAOD;;EAED,SAAS2B,iBAAT,CAA2BL,MAA3B,EAA2CxB,EAA3C,EAAiD;IAC/C,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C;EACD;;EAED,OAAO8B,kBAAkB,CACvBP,qBADuB,EAEvBM,iBAFuB,EAGvB,IAHuB,EAIvBjD,OAJuB,CAAzB;AAMD;AAsBD;;;;;;;AAOG;;;AACa,2BACdA,OADc,EACkB;EAAA,IAAhCA,OAAgC;IAAhCA,OAAgC,GAAF,EAA9BA;EAAgC;;EAEhC,SAASmD,kBAAT,CACEP,MADF,EAEEC,aAFF,EAEkC;IAAA;;IAEhC,IAAI;MACFpB,QAAQ,GAAG,GADT;MAEFqB,MAAM,GAAG,EAFP;MAGFC,IAAI,GAAG;IAHL,IAIAK,SAAS,CAACR,MAAM,CAACrB,QAAPqB,CAAgBG,IAAhBH,CAAqBS,MAArBT,CAA4B,CAA5BA,CAAD,CAJb;IAKA,OAAOpB,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYqB,MAAZ;MAAoBC;IAApB,CAFmB;IAInB,uCAAa,CAAC1B,KAAd,KAAqB2B,IAArB,GAAqBA,MAArB,GAAqBA,yBAArB,KAA4B,IAJT,EAKnB,uCAAa,CAAC3B,KAAdwB,2CAAqBvB,GAArB,KAA4B,SALT,CAArB;EAOD;;EAED,SAASgC,cAAT,CAAwBV,MAAxB,EAAwCxB,EAAxC,EAA8C;IAC5C,IAAImC,IAAI,GAAGX,MAAM,CAACY,QAAPZ,CAAgBa,aAAhBb,CAA8B,MAA9BA,CAAX;IACA,IAAIc,IAAI,GAAG,EAAX;;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAALJ,CAAkB,MAAlBA,CAAZ,EAAuC;MACrC,IAAIK,GAAG,GAAGhB,MAAM,CAACrB,QAAPqB,CAAgBc,IAA1B;MACA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJF,CAAY,GAAZA,CAAhB;MACAF,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAfA,GAAmBD,GAAnBC,GAAyBD,GAAG,CAACG,KAAJH,CAAU,CAAVA,EAAaC,SAAbD,CAAhCF;IACD;;IAED,OAAOA,IAAI,GAAG,GAAPA,IAAc,OAAOtC,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAAtDsC,CAAP;EACD;;EAED,SAASM,oBAAT,CAA8BzC,QAA9B,EAAkDH,EAAlD,EAAwD;IACtDM,SAAO,CACLH,QAAQ,CAACE,QAATF,CAAkBI,MAAlBJ,CAAyB,CAAzBA,MAAgC,GAD3B,iEAEwDK,IAAI,CAACC,SAALD,CAC3DR,EAD2DQ,CAFxD,GAAP,GAAO,CAAPF;EAMD;;EAED,OAAOwB,kBAAkB,CACvBC,kBADuB,EAEvBG,cAFuB,EAGvBU,oBAHuB,EAIvBhE,OAJuB,CAAzB;AAMD,C,CAAA;AAGD;AACA;AACA;;;AAEA,SAAS0B,SAAT,CAAiBuC,IAAjB,EAA4BC,OAA5B,EAA2C;EACzC,IAAI,CAACD,IAAL,EAAW;IACT;IACA,IAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAARD,CAAaD,OAAbC;;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIE,KAAJ,CAAUH,OAAV,CAAN,CANE;IAAJ,EAQE,OAAOI,CAAP,EAAU,CAAE;EACf;AACF;;AAED,SAASC,SAAT,GAAkB;EAChB,OAAOvD,IAAI,CAACwD,MAALxD,GAAcyD,QAAdzD,CAAuB,EAAvBA,EAA2BqC,MAA3BrC,CAAkC,CAAlCA,EAAqC,CAArCA,CAAP;AACD;AAED;;AAEG;;;AACH,SAAS0D,eAAT,CAAyBnD,QAAzB,EAA2C;EACzC,OAAO;IACLyB,GAAG,EAAEzB,QAAQ,CAACF,KADT;IAELC,GAAG,EAAEC,QAAQ,CAACD;EAFT,CAAP;AAID;AAED;;AAEG;;;AACG,SAAUE,cAAV,CACJmD,OADI,EAEJvD,EAFI,EAGJC,KAHI,EAIJC,GAJI,EAIQ;EAAA,IADZD,KACY;IADZA,KACY,GADC,IAAbA;EACY;;EAEZ,IAAIE,QAAQ;IACVE,QAAQ,EAAE,OAAOkD,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAAClD,QADhD;IAEVqB,MAAM,EAAE,EAFE;IAGVC,IAAI,EAAE;EAHI,GAIN,OAAO3B,EAAP,KAAc,QAAd,GAAyBgC,SAAS,CAAChC,EAAD,CAAlC,GAAyCA,EAJnC;IAKVC,KALU;IAMV;IACA;IACA;IACA;IACAC,GAAG,EAAG,GAAe,IAAf,kBAAe,CAAEA,GAAjB,KAAwBA,GAAxB,IAA+BiD,SAAS;EAVpC,EAAZ;;EAYA,OAAOhD,QAAP;AACD;AAED;;AAEG;;;AACa,oBAIAqD,IAJA,EAIA;EAAA,IAJW;IACzBnD,QAAQ,GAAG,GADc;IAEzBqB,MAAM,GAAG,EAFgB;IAGzBC,IAAI,GAAG;EAHkB,IAIX6B;EACd,IAAI9B,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACErB,QAAQ,IAAIqB,MAAM,CAACnB,MAAPmB,CAAc,CAAdA,MAAqB,GAArBA,GAA2BA,MAA3BA,GAAoC,MAAMA,MAAtDrB;EACF,IAAIsB,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEtB,QAAQ,IAAIsB,IAAI,CAACpB,MAALoB,CAAY,CAAZA,MAAmB,GAAnBA,GAAyBA,IAAzBA,GAAgC,MAAMA,IAAlDtB;EACF,OAAOA,QAAP;AACD;AAED;;AAEG;;;AACG,SAAU2B,SAAV,CAAoByB,IAApB,EAAgC;EACpC,IAAIC,UAAU,GAAkB,EAAhC;;EAEA,IAAID,IAAJ,EAAU;IACR,IAAIhB,SAAS,GAAGgB,IAAI,CAACf,OAALe,CAAa,GAAbA,CAAhB;;IACA,IAAIhB,SAAS,IAAI,CAAjB,EAAoB;MAClBiB,UAAU,CAAC/B,IAAX+B,GAAkBD,IAAI,CAACxB,MAALwB,CAAYhB,SAAZgB,CAAlBC;MACAD,IAAI,GAAGA,IAAI,CAACxB,MAALwB,CAAY,CAAZA,EAAehB,SAAfgB,CAAPA;IACD;;IAED,IAAIE,WAAW,GAAGF,IAAI,CAACf,OAALe,CAAa,GAAbA,CAAlB;;IACA,IAAIE,WAAW,IAAI,CAAnB,EAAsB;MACpBD,UAAU,CAAChC,MAAXgC,GAAoBD,IAAI,CAACxB,MAALwB,CAAYE,WAAZF,CAApBC;MACAD,IAAI,GAAGA,IAAI,CAACxB,MAALwB,CAAY,CAAZA,EAAeE,WAAfF,CAAPA;IACD;;IAED,IAAIA,IAAJ,EAAU;MACRC,UAAU,CAACrD,QAAXqD,GAAsBD,IAAtBC;IACD;EACF;;EAED,OAAOA,UAAP;AACD;;AASD,SAAS5B,kBAAT,CACE8B,WADF,EAEEjD,UAFF,EAGEkD,gBAHF,EAIEjF,OAJF,EAIiC;EAAA,IAA/BA,OAA+B;IAA/BA,OAA+B,GAAF,EAA7BA;EAA+B;;EAE/B,IAAI;IAAE4C,MAAM,GAAGY,QAAQ,CAAC0B,WAApB;IAAkC/E,QAAQ,GAAG;EAA7C,IAAuDH,OAA3D;EACA,IAAI6C,aAAa,GAAGD,MAAM,CAACd,OAA3B;EACA,IAAIlB,MAAM,GAAGd,MAAM,CAACe,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;;EAEA,SAASqE,SAAT,GAAkB;IAChBvE,MAAM,GAAGd,MAAM,CAACe,GAAhBD;;IACA,IAAIE,QAAJ,EAAc;MACZA,QAAQ,CAAC;QAAEF,MAAF;QAAUW,QAAQ,EAAEO,OAAO,CAACP;MAA5B,CAAD,CAART;IACD;EACF;;EAED,SAASmB,IAAT,CAAcb,EAAd,EAAsBC,KAAtB,EAAiC;IAC/BT,MAAM,GAAGd,MAAM,CAACoC,IAAhBtB;IACA,IAAIW,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B;IACA4D,gBAAgB,QAAhBA,4BAAgB,CAAG1D,QAAH,EAAaH,EAAb,CAAhB6D;IAEA,IAAIG,YAAY,GAAGV,eAAe,CAACnD,QAAD,CAAlC;IACA,IAAIqC,GAAG,GAAG9B,OAAO,CAACC,UAARD,CAAmBP,QAAnBO,CAAV,CAN+B;;IAS/B,IAAI;MACFe,aAAa,CAACwC,SAAdxC,CAAwBuC,YAAxBvC,EAAsC,EAAtCA,EAA0Ce,GAA1Cf;IADF,EAEE,OAAOyC,KAAP,EAAc;MACd;MACA;MACA1C,MAAM,CAACrB,QAAPqB,CAAgB2C,MAAhB3C,CAAuBgB,GAAvBhB;IACD;;IAED,IAAIzC,QAAQ,IAAIW,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF;QAAUW;MAAV,CAAD,CAART;IACD;EACF;;EAED,SAASuB,OAAT,CAAiBjB,EAAjB,EAAyBC,KAAzB,EAAoC;IAClCT,MAAM,GAAGd,MAAM,CAACwC,OAAhB1B;IACA,IAAIW,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B;IACA4D,gBAAgB,QAAhBA,4BAAgB,CAAG1D,QAAH,EAAaH,EAAb,CAAhB6D;IAEA,IAAIG,YAAY,GAAGV,eAAe,CAACnD,QAAD,CAAlC;IACA,IAAIqC,GAAG,GAAG9B,OAAO,CAACC,UAARD,CAAmBP,QAAnBO,CAAV;IACAe,aAAa,CAAC2C,YAAd3C,CAA2BuC,YAA3BvC,EAAyC,EAAzCA,EAA6Ce,GAA7Cf;;IAEA,IAAI1C,QAAQ,IAAIW,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF;QAAUW,QAAQ,EAAEA;MAApB,CAAD,CAART;IACD;EACF;;EAED,IAAIgB,OAAO,GAAY;IACrB,IAAIlB,MAAJ,GAAU;MACR,OAAOA,MAAP;IAFmB;;IAIrB,IAAIW,QAAJ,GAAY;MACV,OAAOyD,WAAW,CAACpC,MAAD,EAASC,aAAT,CAAlB;IALmB;;IAOrBJ,MAAM,CAACC,EAAD,EAAa;MACjB,IAAI5B,QAAJ,EAAc;QACZ,MAAM,IAAIuD,KAAJ,CAAU,4CAAV,CAAN;MACD;;MACDzB,MAAM,CAAC6C,gBAAP7C,CAAwB7C,iBAAxB6C,EAA2CuC,SAA3CvC;MACA9B,QAAQ,GAAG4B,EAAX5B;MAEA,OAAO,MAAK;QACV8B,MAAM,CAAC8C,mBAAP9C,CAA2B7C,iBAA3B6C,EAA8CuC,SAA9CvC;QACA9B,QAAQ,GAAG,IAAXA;MAFF;IAdmB;;IAmBrBiB,UAAU,CAACX,EAAD,EAAG;MACX,OAAOW,UAAU,CAACa,MAAD,EAASxB,EAAT,CAAjB;IApBmB;;IAsBrBa,IAtBqB;IAuBrBI,OAvBqB;;IAwBrBE,EAAE,CAACxB,CAAD,EAAE;MACF,OAAO8B,aAAa,CAACN,EAAdM,CAAiB9B,CAAjB8B,CAAP;IACD;;EA1BoB,CAAvB;EA6BA,OAAOf,OAAP;AACD,C,CAAA;;;AC5lBD,IAAY6D,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AAJF,GAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;AAqOA;;;;AAIG;;;AACG,SAAUC,WAAV,CACJC,MADI,EAEJC,WAFI,EAGJC,QAHI,EAGU;EAAA,IAAdA,QAAc;IAAdA,QAAc,GAAH,GAAXA;EAAc;;EAEd,IAAIxE,QAAQ,GACV,OAAOuE,WAAP,KAAuB,QAAvB,GAAkC1C,SAAS,CAAC0C,WAAD,CAA3C,GAA2DA,WAD7D;EAGA,IAAIrE,QAAQ,GAAGuE,aAAa,CAACzE,QAAQ,CAACE,QAATF,IAAqB,GAAtB,EAA2BwE,QAA3B,CAA5B;;EAEA,IAAItE,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;;EAED,IAAIwE,QAAQ,GAAGC,aAAa,CAACL,MAAD,CAA5B;EACAM,iBAAiB,CAACF,QAAD,CAAjBE;EAEA,IAAIC,OAAO,GAAG,IAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAXA,IAAmBC,CAAC,GAAGJ,QAAQ,CAACtF,MAAhD,EAAwD,EAAE0F,CAA1D,EAA6D;IAC3DD,OAAO,GAAGE,gBAAgB,CAA0BL,QAAQ,CAACI,CAAD,CAAlC,EAAuC5E,QAAvC,CAA1B2E;EACD;;EAED,OAAOA,OAAP;AACD;;AAeD,SAASF,aAAT,CACEL,MADF,EAEEI,QAFF,EAGEM,WAHF,EAIEC,UAJF,EAIiB;EAAA,IAFfP,QAEe;IAFfA,QAEe,GAF4B,EAA3CA;EAEe;;EAAA,IADfM,WACe;IADfA,WACe,GAD6B,EAA5CA;EACe;;EAAA,IAAfC,UAAe;IAAfA,UAAe,GAAF,EAAbA;EAAe;;EAEfX,MAAM,CAACY,OAAPZ,CAAe,CAACa,KAAD,EAAQnG,KAAR,KAAiB;IAC9B,IAAIoG,IAAI,GAA+B;MACrCC,YAAY,EAAEF,KAAK,CAAC7B,IAAN6B,IAAc,EADS;MAErCG,aAAa,EAAEH,KAAK,CAACG,aAANH,KAAwB,IAFF;MAGrCI,aAAa,EAAEvG,KAHsB;MAIrCmG;IAJqC,CAAvC;;IAOA,IAAIC,IAAI,CAACC,YAALD,CAAkBI,UAAlBJ,CAA6B,GAA7BA,CAAJ,EAAuC;MACrCK,SAAS,CACPL,IAAI,CAACC,YAALD,CAAkBI,UAAlBJ,CAA6BH,UAA7BG,CADO,EAEP,2BAAwBA,IAAI,CAACC,YAA7B,GACMJ,uBADN,IACMA,oBADN,iHAFO,CAATQ;MAOAL,IAAI,CAACC,YAALD,GAAoBA,IAAI,CAACC,YAALD,CAAkB5C,KAAlB4C,CAAwBH,UAAU,CAAC7F,MAAnCgG,CAApBA;IACD;;IAED,IAAI9B,IAAI,GAAGoC,SAAS,CAAC,CAACT,UAAD,EAAaG,IAAI,CAACC,YAAlB,CAAD,CAApB;IACA,IAAIM,UAAU,GAAGX,WAAW,CAACY,MAAZZ,CAAmBI,IAAnBJ,CAAjB,CApB8B;IAuB9B;IACA;;IACA,IAAIG,KAAK,CAACU,QAANV,IAAkBA,KAAK,CAACU,QAANV,CAAe/F,MAAf+F,GAAwB,CAA9C,EAAiD;MAC/CM,SAAS,CACPN,KAAK,CAACnG,KAANmG,KAAgB,IADT,EAEP,qGACuC7B,IADvC,SAFO,CAATmC;MAMAd,aAAa,CAACQ,KAAK,CAACU,QAAP,EAAiBnB,QAAjB,EAA2BiB,UAA3B,EAAuCrC,IAAvC,CAAbqB;IAhC4B;IAoC9B;;;IACA,IAAIQ,KAAK,CAAC7B,IAAN6B,IAAc,IAAdA,IAAsB,CAACA,KAAK,CAACnG,KAAjC,EAAwC;MACtC;IACD;;IAED0F,QAAQ,CAAChE,IAATgE,CAAc;MAAEpB,IAAF;MAAQwC,KAAK,EAAEC,YAAY,CAACzC,IAAD,EAAO6B,KAAK,CAACnG,KAAb,CAA3B;MAAgD2G;IAAhD,CAAdjB;EAzCF;EA4CA,OAAOA,QAAP;AACD;;AAED,SAASE,iBAAT,CAA2BF,QAA3B,EAAkD;EAChDA,QAAQ,CAACsB,IAATtB,CAAc,CAACuB,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAACH,KAAFG,KAAYC,CAAC,CAACJ,KAAdG,GACIC,CAAC,CAACJ,KAAFI,GAAUD,CAAC,CAACH,KADhBG;EAAAA,EAEIE,cAAc,CACZF,CAAC,CAACN,UAAFM,CAAanH,GAAbmH,CAAkBb,IAAD,IAAUA,IAAI,CAACG,aAAhCU,CADY,EAEZC,CAAC,CAACP,UAAFO,CAAapH,GAAboH,CAAkBd,IAAD,IAAUA,IAAI,CAACG,aAAhCW,CAFY,CAHpBxB;AAQD;;AAED,MAAM0B,OAAO,GAAG,QAAhB;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,YAAY,GAAG,CAAC,CAAtB;;AACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAK,GAArC;;AAEA,SAASZ,YAAT,CAAsBzC,IAAtB,EAAoCtE,KAApC,EAA8D;EAC5D,IAAI4H,QAAQ,GAAGtD,IAAI,CAACuD,KAALvD,CAAW,GAAXA,CAAf;EACA,IAAIwD,YAAY,GAAGF,QAAQ,CAACxH,MAA5B;;EACA,IAAIwH,QAAQ,CAACG,IAATH,CAAcF,OAAdE,CAAJ,EAA4B;IAC1BE,YAAY,IAAIL,YAAhBK;EACD;;EAED,IAAI9H,KAAJ,EAAW;IACT8H,YAAY,IAAIR,eAAhBQ;EACD;;EAED,OAAOF,QAAQ,CACZI,MADIJ,CACID,CAAD,IAAO,CAACD,OAAO,CAACC,CAAD,CADlBC,EAEJK,MAFIL,CAGH,CAACd,KAAD,EAAQoB,OAAR,KACEpB,KAAK,IACJM,OAAO,CAACe,IAARf,CAAac,OAAbd,IACGC,mBADHD,GAEGc,OAAO,KAAK,EAAZA,GACAX,iBADAW,GAEAV,kBALC,CAJJI,EAUHE,YAVGF,CAAP;AAYD;;AAED,SAAST,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAAgD;EAC9C,IAAIkB,QAAQ,GACVnB,CAAC,CAAC7G,MAAF6G,KAAaC,CAAC,CAAC9G,MAAf6G,IAAyBA,CAAC,CAACzD,KAAFyD,CAAQ,CAARA,EAAW,CAAC,CAAZA,EAAeoB,KAAfpB,CAAqB,CAACzG,CAAD,EAAIsF,CAAJ,KAAUtF,CAAC,KAAK0G,CAAC,CAACpB,CAAD,CAAtCmB,CAD3B;EAGA,OAAOmB,QAAQ;EAEX;EACA;EACA;EACAnB,CAAC,CAACA,CAAC,CAAC7G,MAAF6G,GAAW,CAAZ,CAADA,GAAkBC,CAAC,CAACA,CAAC,CAAC9G,MAAF8G,GAAW,CAAZ,CALR;EAOX;EACA,CARJ;AASD;;AAED,SAASnB,gBAAT,CAIEuC,MAJF,EAKEpH,QALF,EAKkB;EAEhB,IAAI;IAAEyF;EAAF,IAAiB2B,MAArB;EAEA,IAAIC,aAAa,GAAG,EAApB;EACA,IAAIC,eAAe,GAAG,GAAtB;EACA,IAAI3C,OAAO,GAA4C,EAAvD;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,UAAU,CAACvG,MAA/B,EAAuC,EAAE0F,CAAzC,EAA4C;IAC1C,IAAIM,IAAI,GAAGO,UAAU,CAACb,CAAD,CAArB;IACA,IAAI2C,GAAG,GAAG3C,CAAC,KAAKa,UAAU,CAACvG,MAAXuG,GAAoB,CAApC;IACA,IAAI+B,iBAAiB,GACnBF,eAAe,KAAK,GAApBA,GACItH,QADJsH,GAEItH,QAAQ,CAACsC,KAATtC,CAAesH,eAAe,CAACpI,MAA/Bc,KAA0C,GAHhD;IAIA,IAAIyH,KAAK,GAAGC,SAAS,CACnB;MAAEtE,IAAI,EAAE8B,IAAI,CAACC,YAAb;MAA2BC,aAAa,EAAEF,IAAI,CAACE,aAA/C;MAA8DmC;IAA9D,CADmB,EAEnBC,iBAFmB,CAArB;IAKA,IAAI,CAACC,KAAL,EAAY,OAAO,IAAP;IAEZE,MAAM,CAAC7D,MAAP6D,CAAcN,aAAdM,EAA6BF,KAAK,CAACG,MAAnCD;IAEA,IAAI1C,KAAK,GAAGC,IAAI,CAACD,KAAjB;IAEAN,OAAO,CAACnE,IAARmE,CAAa;MACX;MACAiD,MAAM,EAAEP,aAFG;MAGXrH,QAAQ,EAAEwF,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAACzH,QAAxB,CAAD,CAHR;MAIX6H,YAAY,EAAEC,iBAAiB,CAC7BtC,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CADoB,CAJpB;MAOX5C;IAPW,CAAbN;;IAUA,IAAI8C,KAAK,CAACI,YAANJ,KAAuB,GAA3B,EAAgC;MAC9BH,eAAe,GAAG9B,SAAS,CAAC,CAAC8B,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CAA3BP;IACD;EACF;;EAED,OAAO3C,OAAP;AACD;AAED;;;;AAIG;;;SACaoD,aAAa3E,MAAcwE,QAAmB;EAAA,IAAnBA,MAAmB;IAAnBA,MAAmB,GAAF,EAAjBA;EAAmB;;EAC5D,OAAOxE,IAAI,CACRxC,OADIwC,CACI,SADJA,EACe,CAAC4E,CAAD,EAAInI,GAAJ,KAAW;IAC7B0F,SAAS,CAACqC,MAAM,CAAC/H,GAAD,CAAN+H,IAAe,IAAhB,EAAmC/H,sBAA5C,UAAS,CAAT0F;IACA,OAAOqC,MAAM,CAAC/H,GAAD,CAAb;EAHG,GAKJe,OALIwC,CAKI,QALJA,EAKe4E,CAAD,IACjBJ,MAAM,CAAC,GAAD,CAANA,IAAe,IAAfA,GAAsB,EAAtBA,GAA2BA,MAAM,CAAC,GAAD,CAANA,CAAYhH,OAAZgH,CAAoB,MAApBA,EAA4B,GAA5BA,CANxBxE,CAAP;AAQD;AAiDD;;;;;AAKG;;;AACa,mBAId6E,OAJc,EAKdjI,QALc,EAKE;EAEhB,IAAI,OAAOiI,OAAP,KAAmB,QAAvB,EAAiC;IAC/BA,OAAO,GAAG;MAAE7E,IAAI,EAAE6E,OAAR;MAAiB7C,aAAa,EAAE,KAAhC;MAAuCmC,GAAG,EAAE;IAA5C,CAAVU;EACD;;EAED,IAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBC,WAAW,CACrCH,OAAO,CAAC7E,IAD6B,EAErC6E,OAAO,CAAC7C,aAF6B,EAGrC6C,OAAO,CAACV,GAH6B,CAAvC;EAMA,IAAIE,KAAK,GAAGzH,QAAQ,CAACyH,KAATzH,CAAekI,OAAflI,CAAZ;EACA,IAAI,CAACyH,KAAL,EAAY,OAAO,IAAP;EAEZ,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B;EACA,IAAII,YAAY,GAAGP,eAAe,CAAC1G,OAAhB0G,CAAwB,SAAxBA,EAAmC,IAAnCA,CAAnB;EACA,IAAIe,aAAa,GAAGZ,KAAK,CAACnF,KAANmF,CAAY,CAAZA,CAApB;EACA,IAAIG,MAAM,GAAWO,UAAU,CAACpB,MAAXoB,CACnB,CAACG,IAAD,EAAOC,SAAP,EAAkBzJ,KAAlB,KAA2B;IACzB;IACA;IACA,IAAIyJ,SAAS,KAAK,GAAlB,EAAuB;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAACvJ,KAAD,CAAbuJ,IAAwB,EAAzC;MACAR,YAAY,GAAGP,eAAe,CAC3BhF,KADYgF,CACN,CADMA,EACHA,eAAe,CAACpI,MAAhBoI,GAAyBkB,UAAU,CAACtJ,MADjCoI,EAEZ1G,OAFY0G,CAEJ,SAFIA,EAEO,IAFPA,CAAfO;IAGD;;IAEDS,IAAI,CAACC,SAAD,CAAJD,GAAkBG,wBAAwB,CACxCJ,aAAa,CAACvJ,KAAD,CAAbuJ,IAAwB,EADgB,EAExCE,SAFwC,CAA1CD;IAIA,OAAOA,IAAP;EAfiB,GAiBnB,EAjBmBH,CAArB;EAoBA,OAAO;IACLP,MADK;IAEL5H,QAAQ,EAAEsH,eAFL;IAGLO,YAHK;IAILI;EAJK,CAAP;AAMD;;AAED,SAASG,WAAT,CACEhF,IADF,EAEEgC,aAFF,EAGEmC,GAHF,EAGY;EAAA,IADVnC,aACU;IADVA,aACU,GADM,KAAhBA;EACU;;EAAA,IAAVmC,GAAU;IAAVA,GAAU,GAAJ,IAANA;EAAU;;EAEVtH,OAAO,CACLmD,IAAI,KAAK,GAATA,IAAgB,CAACA,IAAI,CAACsF,QAALtF,CAAc,GAAdA,CAAjBA,IAAuCA,IAAI,CAACsF,QAALtF,CAAc,IAAdA,CADlC,EAEL,kBAAeA,IAAf,iDACMA,IAAI,CAACxC,OAALwC,CAAa,KAAbA,EAAoB,IAApBA,CADN,wJAGsCA,IAAI,CAACxC,OAALwC,CAAa,KAAbA,EAAoB,IAApBA,CAHtC,SAFK,CAAPnD;EAQA,IAAIkI,UAAU,GAAa,EAA3B;EACA,IAAIQ,YAAY,GACd,MACAvF,IAAI,CACDxC,OADHwC,CACW,SADXA,EACsB,EADtBA,EAC0B;EAD1BA,CAEGxC,OAFHwC,CAEW,MAFXA,EAEmB,GAFnBA,EAEwB;EAFxBA,CAGGxC,OAHHwC,CAGW,qBAHXA,EAGkC,MAHlCA,EAG0C;EAH1CA,CAIGxC,OAJHwC,CAIW,SAJXA,EAIsB,CAAC4E,CAAD,EAAYO,SAAZ,KAAiC;IACnDJ,UAAU,CAAC3H,IAAX2H,CAAgBI,SAAhBJ;IACA,OAAO,WAAP;EANJ,EAFF;;EAWA,IAAI/E,IAAI,CAACsF,QAALtF,CAAc,GAAdA,CAAJ,EAAwB;IACtB+E,UAAU,CAAC3H,IAAX2H,CAAgB,GAAhBA;IACAQ,YAAY,IACVvF,IAAI,KAAK,GAATA,IAAgBA,IAAI,KAAK,IAAzBA,GACI,OADJA;IAAAA,EAEI,mBAHNuF,CAFsB;EAAxB,OAMO;IACLA,YAAY,IAAIpB,GAAG,GACf,OADe;IAAA;IAGf;IACA;IACA;IACA;IACA;IACA,uCARJoB;EASD;;EAED,IAAIT,OAAO,GAAG,IAAIU,MAAJ,CAAWD,YAAX,EAAyBvD,aAAa,GAAGpG,SAAH,GAAe,GAArD,CAAd;EAEA,OAAO,CAACkJ,OAAD,EAAUC,UAAV,CAAP;AACD;;AAED,SAASM,wBAAT,CAAkCI,KAAlC,EAAiDN,SAAjD,EAAkE;EAChE,IAAI;IACF,OAAOO,kBAAkB,CAACD,KAAD,CAAzB;EADF,EAEE,OAAOhF,KAAP,EAAc;IACd5D,OAAO,CACL,KADK,EAEL,mCAAgCsI,SAAhC,0DACkBM,KADlB,8FAEqChF,KAFrC,QAFK,CAAP5D;IAOA,OAAO4I,KAAP;EACD;AACF;AAED;;AAEG;;;AACa,uBACd7I,QADc,EAEdsE,QAFc,EAEE;EAEhB,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAOtE,QAAP;;EAEtB,IAAI,CAACA,QAAQ,CAAC+I,WAAT/I,GAAuBsF,UAAvBtF,CAAkCsE,QAAQ,CAACyE,WAATzE,EAAlCtE,CAAL,EAAgE;IAC9D,OAAO,IAAP;EALc;EAShB;;;EACA,IAAIgJ,UAAU,GAAG1E,QAAQ,CAACoE,QAATpE,CAAkB,GAAlBA,IACbA,QAAQ,CAACpF,MAAToF,GAAkB,CADLA,GAEbA,QAAQ,CAACpF,MAFb;EAGA,IAAI+J,QAAQ,GAAGjJ,QAAQ,CAACE,MAATF,CAAgBgJ,UAAhBhJ,CAAf;;EACA,IAAIiJ,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;IAChC;IACA,OAAO,IAAP;EACD;;EAED,OAAOjJ,QAAQ,CAACsC,KAATtC,CAAegJ,UAAfhJ,KAA8B,GAArC;AACD;;AAUe,mBAAU6I,KAAV,EAAsBpG,OAAtB,EAAsC;EACpD,IAAIoG,KAAK,KAAK,KAAVA,IAAmBA,KAAK,KAAK,IAA7BA,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;IACrE,MAAM,IAAIjG,KAAJ,CAAUH,OAAV,CAAN;EACD;AACF;AAED;;AAEG;;;AACa,iBAAQD,IAAR,EAAmBC,OAAnB,EAAkC;EAChD,IAAI,CAACD,IAAL,EAAW;IACT;IACA,IAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAARD,CAAaD,OAAbC;;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIE,KAAJ,CAAUH,OAAV,CAAN,CANE;IAAJ,EAQE,OAAOI,CAAP,EAAU,CAAE;EACf;AACF;AAED;;;;AAIG;;;SACaqG,YAAYvJ,IAAQwJ,cAAkB;EAAA,IAAlBA,YAAkB;IAAlBA,YAAkB,GAAH,GAAfA;EAAkB;;EACpD,IAAI;IACFnJ,QAAQ,EAAEoJ,UADR;IAEF/H,MAAM,GAAG,EAFP;IAGFC,IAAI,GAAG;EAHL,IAIA,OAAO3B,EAAP,KAAc,QAAd,GAAyBgC,SAAS,CAAChC,EAAD,CAAlC,GAAyCA,EAJ7C;EAMA,IAAIK,QAAQ,GAAGoJ,UAAU,GACrBA,UAAU,CAAC9D,UAAX8D,CAAsB,GAAtBA,IACEA,UADFA,GAEEC,eAAe,CAACD,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ;EAMA,OAAO;IACLnJ,QADK;IAELqB,MAAM,EAAEiI,eAAe,CAACjI,MAAD,CAFlB;IAGLC,IAAI,EAAEiI,aAAa,CAACjI,IAAD;EAHd,CAAP;AAKD;;AAED,SAAS+H,eAAT,CAAyBlE,YAAzB,EAA+CgE,YAA/C,EAAmE;EACjE,IAAIzC,QAAQ,GAAGyC,YAAY,CAACvI,OAAbuI,CAAqB,MAArBA,EAA6B,EAA7BA,EAAiCxC,KAAjCwC,CAAuC,GAAvCA,CAAf;EACA,IAAIK,gBAAgB,GAAGrE,YAAY,CAACwB,KAAbxB,CAAmB,GAAnBA,CAAvB;EAEAqE,gBAAgB,CAACxE,OAAjBwE,CAA0BxC,OAAD,IAAY;IACnC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;MACpB;MACA,IAAIN,QAAQ,CAACxH,MAATwH,GAAkB,CAAtB,EAAyBA,QAAQ,CAAC+C,GAAT/C;IAF3B,OAGO,IAAIM,OAAO,KAAK,GAAhB,EAAqB;MAC1BN,QAAQ,CAAClG,IAATkG,CAAcM,OAAdN;IACD;EANH;EASA,OAAOA,QAAQ,CAACxH,MAATwH,GAAkB,CAAlBA,GAAsBA,QAAQ,CAACgD,IAAThD,CAAc,GAAdA,CAAtBA,GAA2C,GAAlD;AACD;AAED;;AAEG;;;SACaiD,UACdC,OACAC,gBACAC,kBAAwB;EAExB,IAAInK,EAAE,GAAG,OAAOiK,KAAP,KAAiB,QAAjB,GAA4BjI,SAAS,CAACiI,KAAD,CAArC,gBAAoDA,KAApD,CAAT;EACA,IAAIG,WAAW,GAAGH,KAAK,KAAK,EAAVA,IAAgBjK,EAAE,CAACK,QAAHL,KAAgB,EAAlD;EACA,IAAIyJ,UAAU,GAAGW,WAAW,GAAG,GAAH,GAASpK,EAAE,CAACK,QAAxC,CAJwB;EAOxB;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIgK,IAAJ;;EACA,IAAIZ,UAAU,IAAI,IAAlB,EAAwB;IACtBY,IAAI,GAAGF,gBAAPE;EADF,OAEO;IACL,IAAIC,kBAAkB,GAAGJ,cAAc,CAAC3K,MAAf2K,GAAwB,CAAjD;;IAEA,IAAIT,UAAU,CAAC9D,UAAX8D,CAAsB,IAAtBA,CAAJ,EAAiC;MAC/B,IAAIc,UAAU,GAAGd,UAAU,CAACzC,KAAXyC,CAAiB,GAAjBA,CAAjB,CAD+B;MAI/B;MACA;;MACA,OAAOc,UAAU,CAAC,CAAD,CAAVA,KAAkB,IAAzB,EAA+B;QAC7BA,UAAU,CAACC,KAAXD;QACAD,kBAAkB,IAAI,CAAtBA;MACD;;MAEDtK,EAAE,CAACK,QAAHL,GAAcuK,UAAU,CAACR,IAAXQ,CAAgB,GAAhBA,CAAdvK;IAdG;IAkBL;;;IACAqK,IAAI,GAAGC,kBAAkB,IAAI,CAAtBA,GAA0BJ,cAAc,CAACI,kBAAD,CAAxCA,GAA+D,GAAtED;EACD;;EAED,IAAI5G,IAAI,GAAG8F,WAAW,CAACvJ,EAAD,EAAKqK,IAAL,CAAtB,CAtCwB;;EAyCxB,IAAII,wBAAwB,GAC1BhB,UAAU,IAAIA,UAAU,KAAK,GAA7BA,IAAoCA,UAAU,CAACV,QAAXU,CAAoB,GAApBA,CADtC,CAzCwB;;EA4CxB,IAAIiB,uBAAuB,GACzB,CAACN,WAAW,IAAIX,UAAU,KAAK,GAA/B,KAAuCU,gBAAgB,CAACpB,QAAjBoB,CAA0B,GAA1BA,CADzC;;EAEA,IACE,CAAC1G,IAAI,CAACpD,QAALoD,CAAcsF,QAAdtF,CAAuB,GAAvBA,CAAD,KACCgH,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;IACAjH,IAAI,CAACpD,QAALoD,IAAiB,GAAjBA;EACD;;EAED,OAAOA,IAAP;AACD;AAED;;AAEG;;;AACG,SAAUkH,aAAV,CAAwB3K,EAAxB,EAA8B;EAClC;EACA,OAAOA,EAAE,KAAK,EAAPA,IAAcA,EAAW,CAACK,QAAZL,KAAyB,EAAvCA,GACH,GADGA,GAEH,OAAOA,EAAP,KAAc,QAAd,GACAgC,SAAS,CAAChC,EAAD,CAATgC,CAAc3B,QADd,GAEAL,EAAE,CAACK,QAJP;AAKD;AAED;;AAEG;;;MACUwF,SAAS,GAAI+E,KAAD,IACvBA,KAAK,CAACb,IAANa,CAAW,GAAXA,EAAgB3J,OAAhB2J,CAAwB,QAAxBA,EAAkC,GAAlCA;AAEF;;AAEG;;;MACUzC,iBAAiB,GAAI9H,QAAD,IAC/BA,QAAQ,CAACY,OAATZ,CAAiB,MAAjBA,EAAyB,EAAzBA,EAA6BY,OAA7BZ,CAAqC,MAArCA,EAA6C,GAA7CA;AAEF;;AAEG;;;AACI,MAAMsJ,eAAe,GAAIjI,MAAD,IAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACiE,UAAPjE,CAAkB,GAAlBA,IACAA,MADAA,GAEA,MAAMA,MALL;AAOP;;AAEG;;;AACI,MAAMkI,aAAa,GAAIjI,IAAD,IAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAACgE,UAALhE,CAAgB,GAAhBA,IAAuBA,IAAvBA,GAA8B,MAAMA,IAD5D;AAQP;;;AAGG;;;AACI,MAAMkJ,IAAI,GAAiB,SAArBA,IAAqB,CAACC,IAAD,EAAOC,IAAP,EAAoB;EAAA,IAAbA,IAAa;IAAbA,IAAa,GAAN,EAAPA;EAAa;;EACpD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;;EACA,IAAI,CAACA,OAAO,CAACE,GAARF,CAAY,cAAZA,CAAL,EAAkC;IAChCA,OAAO,CAACG,GAARH,CAAY,cAAZA,EAA4B,iCAA5BA;EACD;;EAED,OAAO,IAAII,QAAJ,CAAa9K,IAAI,CAACC,SAALD,CAAesK,IAAftK,CAAb,eACFwK,YADE;IAELE;EAFK,GAAP;AAID,CAZM;;MAcMK,aAAY;EAOvBC,YAAYV,IAAZ,EAAqC;IAN7B,mBAA2B,IAAIW,GAAJ,EAA3B;IACA,KAASC,SAAT,GAAqB,KAArB;IACA,KAAUC,UAAV,GACNtM,SADM;IAER,KAAIyL,IAAJ,GAAkB,EAAlB;IAGE9C,MAAM,CAAChJ,OAAPgJ,CAAe8C,IAAf9C,EAAqB3C,OAArB2C,CAA6BxE,IAAiB;MAAA,IAAhB,CAACtD,GAAD,EAAMgJ,KAAN,IAAgB1F,MAC5C;;MACA,KAAKsH,IAAL,CAAU5K,GAAV,IAAiBgJ,KAAjB;;MACA,IAAIA,KAAK,YAAY0C,OAArB,EAA8B;QAC5B,KAAKC,WAAL,CAAiBC,GAAjB,CAAqB5L,GAArB;QACAgJ,KAAK,CAAC6C,IAAN7C,CACG4B,IAAD,IAAU,KAAKkB,QAAL,CAAc9L,GAAd,EAAmB,IAAnB,EAAyB4K,IAAzB,CADZ5B,EAEGhF,KAAD,IAAW,KAAK8H,QAAL,CAAc9L,GAAd,EAAmBgE,KAAnB,CAFbgF;MAID;IATH;EAWD;;EAEO8C,QAAQ,CAAC9L,GAAD,EAAcgE,KAAd,EAA0B4G,IAA1B,EAAoC;IAAA;;IAClD,IAAI,KAAKY,SAAT,EAAoB;MAClB;IACD;;IACD,KAAKG,WAAL,CAAiBI,MAAjB,CAAwB/L,GAAxB;IACA,IAAIgJ,KAAK,GAAGhF,KAAK,GAAG,IAAIgI,aAAJ,CAAkBhI,KAAlB,CAAH,GAA8B4G,IAA/C;IACA,KAAKA,IAAL,CAAU5K,GAAV,IAAiBgJ,KAAjB;IACA,yBAAKyC,UAAL,KAAkB,IAAlB,GAAkB,MAAlB,GAAkBQ,mCAAOjM,GAAP,EAAYgJ,KAAZ,CAAlB;EACD;;EAEDkD,SAAS,CAAC9K,EAAD,EAAyD;IAChE,KAAKqK,UAAL,GAAkBrK,EAAlB;EACD;;EAED+K,MAAM;IAAA;;IACJ,KAAKX,SAAL,GAAiB,IAAjB;IACA,KAAKG,WAAL,CAAiBxG,OAAjB,CAAyB,CAACiH,CAAD,EAAIC,CAAJ,KAAU,KAAKV,WAAL,CAAiBI,MAAjB,CAAwBM,CAAxB,CAAnC;IACA,CAAKZ,mCAAL,kDAAkB,IAAlB;EACD;;EAEO,IAAJa,IAAI;IACN,OAAO,KAAKX,WAAL,CAAiBY,IAAjB,KAA0B,CAAjC;EACD;;AA3CsB;AA8CzB;;;AAGG;;;AACG,MAAOP,aAAP,SAA6BjJ,KAA7B,CAAkC;AAExC;;;AAGG;;;AACG,SAAUyJ,eAAV,CAA0BxJ,CAA1B,EAAgC;EACpC,OAAOA,CAAC,YAAYgJ,aAApB;AACD;;AAEK,SAAUS,QAAV,CAAmB7B,IAAnB,EAA4C;EAChD,OAAO,IAAIS,YAAJ,CAAiBT,IAAjB,CAAP;AACD;AAOD;;;AAGG;;;AACI,MAAM8B,QAAQ,GAAqB,SAA7BA,QAA6B,CAACpK,GAAD,EAAMuI,IAAN,EAAoB;EAAA,IAAdA,IAAc;IAAdA,IAAc,GAAP,GAAPA;EAAc;;EAC5D,IAAIC,YAAY,GAAGD,IAAnB;;EACA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAG;MAAEC,MAAM,EAAED;IAAV,CAAfA;EADF,OAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;IACrDD,YAAY,CAACC,MAAbD,GAAsB,GAAtBA;EACD;;EAED,IAAIE,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACAA,OAAO,CAACG,GAARH,CAAY,UAAZA,EAAwB1I,GAAxB0I;EAEA,OAAO,IAAII,QAAJ,CAAa,IAAb,eACFN,YADE;IAELE;EAFK,GAAP;AAID,CAfM;AAiBP;;;AAGG;;;MACU2B,cAAa;EAKxBrB,YAAYP,MAAZ,EAA4B6B,UAA5B,EAA4DhC,IAA5D,EAAqE;IACnE,KAAKG,MAAL,GAAcA,MAAd;IACA,KAAK6B,UAAL,GAAkBA,UAAU,IAAI,EAAhC;IACA,KAAKhC,IAAL,GAAYA,IAAZ;EACD;;AATuB;AAY1B;;;AAGG;;;AACG,SAAUiC,oBAAV,CAA+B7J,CAA/B,EAAqC;EACzC,OAAOA,CAAC,YAAY2J,aAApB;AACD;;ACxlBM,MAAMG,eAAe,GAA6B;EACvD/M,KAAK,EAAE,MADgD;EAEvDE,QAAQ,EAAEd,SAF6C;EAGvD4N,UAAU,EAAE5N,SAH2C;EAIvD6N,UAAU,EAAE7N,SAJ2C;EAKvD8N,WAAW,EAAE9N,SAL0C;EAMvD+N,QAAQ,EAAE/N;AAN6C,CAAlD;AASA,MAAMgO,YAAY,GAA0B;EACjDpN,KAAK,EAAE,MAD0C;EAEjD6K,IAAI,EAAEzL,SAF2C;EAGjD4N,UAAU,EAAE5N,SAHqC;EAIjD6N,UAAU,EAAE7N,SAJqC;EAKjD8N,WAAW,EAAE9N,SALoC;EAMjD+N,QAAQ,EAAE/N;AANuC,CAA5C,C,CAA4C;AAUnD;AACA;AACA;;AAEA;;AAEG;;AACG,SAAUiO,YAAV,CAAuBvC,IAAvB,EAAuC;EAAA;;EAC3CnF,SAAS,CACPmF,IAAI,CAACtG,MAALsG,CAAYxL,MAAZwL,GAAqB,CADd,EAEP,+DAFO,CAATnF;EAKA,IAAI2H,UAAU,GAAGC,yBAAyB,CAACzC,IAAI,CAACtG,MAAN,CAA1C,CAN2C;;EAQ3C,IAAIgJ,eAAe,GAAwB,IAA3C,CAR2C;;EAU3C,IAAI9B,UAAU,GAA4B,IAA1C,CAV2C;;EAY3C,IAAI+B,oBAAoB,GAAkC,IAA1D,CAZ2C;;EAc3C,IAAIC,uBAAuB,GAA2C,IAAtE,CAd2C;;EAgB3C,IAAIC,iBAAiB,GAAqC,IAA1D,CAhB2C;EAkB3C;EACA;EACA;;EACA,IAAIC,qBAAqB,GAAG,KAA5B;EAEA,IAAIC,cAAc,GAAGtJ,WAAW,CAC9B+I,UAD8B,EAE9BxC,IAAI,CAACrK,OAALqK,CAAa5K,QAFiB,EAG9B4K,IAAI,CAACpG,QAHyB,CAAhC;EAKA,IAAIoJ,aAAa,GAAqB,IAAtC;;EAEA,IAAID,cAAc,IAAI,IAAtB,EAA4B;IAC1B,IAAI;MAAE9I,OAAF;MAAWM,KAAX;MAAkBpB;IAAlB,IAA4B8J,kBAAkB,CAACT,UAAD,CAAlD;IACAO,cAAc,GAAG9I,OAAjB8I;IACAC,aAAa,GAAG;MAAE,CAACzI,KAAK,CAAC2I,EAAP,GAAY/J;IAAd,CAAhB6J;EAjCyC;EAqC3C;EACA;;;EACA,IAAIG,yBAAyB,GAC3B,4BAAI,CAACC,aAALpD,yCAAoBqD,MAApB,KAA8B,IAA9B,IACA,6BAAI,CAACD,aAAL,KAAoBE,IAApB,GAAoBA,MAApB,GAAoBA,+BAApB,KAAkC,IADlC,IAEAP,cAAc,CACX3G,MADH2G,CACWQ,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQC,MADzBT,EAEG5G,IAFH4G,CAESQ,CAAD;IAAA;;IAAA,OAAO,6BAAI,CAACH,aAALpD,KAAoBsD,IAApBtD,GAAoBsD,MAApBtD,GAAoBsD,6DAAaC,IAAbD,GAAaC,MAAbD,GAAaC,uBAAC,CAAChJ,KAAFgJ,CAAQL,EAARK,CAAjC,MAAiDjP,SAAxD;EAFR,EAHF;;EAOA,IAAI6O,yBAAJ,EAA+B;IAC7BnL,OAAO,CAACC,IAARD,CACE,yEADF;EAID;;EAED,IAAIyL,WAAW,GACb,CAACV,cAAc,CAAC5G,IAAf4G,CAAqBQ,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQC,MAAnCT,CAAD,IACC/C,IAAI,CAACoD,aAALpD,IAAsB,IAAtBA,IAA8B,CAACmD,yBAFlC;EAIA,IAAIO,MAAJ;EACA,IAAIxO,KAAK,GAAgB;IACvByO,aAAa,EAAE3D,IAAI,CAACrK,OAALqK,CAAavL,MADL;IAEvBW,QAAQ,EAAE4K,IAAI,CAACrK,OAALqK,CAAa5K,QAFA;IAGvB;IACA;IACA6E,OAAO,EAAE8I,cALc;IAMvBU,WANuB;IAOvBG,UAAU,EAAE3B,eAPW;IAQvB4B,qBAAqB,EAAE,IARA;IASvBC,mBAAmB,EAAE,IATE;IAUvBC,YAAY,EAAE,MAVS;IAWvBT,UAAU,EAAEH,yBAAyB,GACjC,EADiC,GAEjC,6BAAI,CAACC,aAAL,0CAAoBE,UAApB,KAAkC,EAbf;IAcvBU,UAAU,EAAE,6BAAI,CAACZ,aAAL,KAAoBY,IAApB,GAAoBA,MAApB,GAAoBA,+BAApB,KAAkC,IAdvB;IAevBX,MAAM,EAAE,6BAAI,CAACD,aAAL,KAAoBC,IAApB,GAAoBA,MAApB,GAAoBA,2BAApB,KAA8BL,aAff;IAgBvBiB,QAAQ,EAAE,IAAIC,GAAJ;EAhBa,CAAzB,CA1D2C;EA8E3C;;EACA,IAAIC,aAAa,GAAyB,IAA1C,CA/E2C;EAiF3C;;EACA,IAAIC,kBAAkB,GAAG,IAAzB,CAlF2C;;EAoF3C,IAAIC,2BAAJ,CApF2C;EAsF3C;;EACA,IAAIC,2BAA2B,GAAG,KAAlC,CAvF2C;EAyF3C;EACA;EACA;;EACA,IAAIC,sBAAsB,GAAG,KAA7B,CA5F2C;EA8F3C;;EACA,IAAIC,uBAAuB,GAAa,EAAxC,CA/F2C;EAiG3C;;EACA,IAAIC,qBAAqB,GAAa,EAAtC,CAlG2C;;EAoG3C,IAAIC,gBAAgB,GAAG,IAAIR,GAAJ,EAAvB,CApG2C;;EAsG3C,IAAIS,kBAAkB,GAAG,CAAzB,CAtG2C;EAwG3C;EACA;;EACA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CA1G2C;;EA4G3C,IAAIC,cAAc,GAAG,IAAIX,GAAJ,EAArB,CA5G2C;;EA8G3C,IAAIY,gBAAgB,GAAG,IAAIpE,GAAJ,EAAvB,CA9G2C;;EAgH3C,IAAIqE,gBAAgB,GAAG,IAAIb,GAAJ,EAAvB,CAhH2C;EAkH3C;EACA;EACA;;EACA,IAAIc,eAAe,GAAG,IAAId,GAAJ,EAAtB,CArH2C;EAwH3C;EACA;;EACA,SAASe,UAAT,GAAmB;IACjB;IACA;IACAvC,eAAe,GAAG1C,IAAI,CAACrK,OAALqK,CAAa1J,MAAb0J,CAChBvH;MAAA,IAAC;QAAEhE,MAAM,EAAEkP,aAAV;QAAyBvO;MAAzB,IAADqD;MAAA,OACEyM,eAAe,CAACvB,aAAD,EAAgBvO,QAAhB,CADjB;IADgB,EAAlBsN,CAHiB;;IASjB,IAAI,CAACxN,KAAK,CAACuO,WAAX,EAAwB;MACtByB,eAAe,CAACC,MAAa,CAACzQ,GAAf,EAAoBQ,KAAK,CAACE,QAA1B,CAAf8P;IACD;;IAED,OAAOxB,MAAP;EAvIyC;;;EA2I3C,SAAS0B,OAAT,GAAgB;IAAA;;IACd,IAAI1C,eAAJ,EAAqB;MACnBA,eAAe;IAChB;;IACD9B,UAAU,GAAG,IAAbA;IACA,+FAA6ByE,KAA7B;IACAnQ,KAAK,CAAC+O,QAAN/O,CAAeoF,OAAfpF,CAAuB,CAACoI,CAAD,EAAInI,GAAJ,KAAYmQ,aAAa,CAACnQ,GAAD,CAAhDD;EAjJyC;;;EAqJ3C,SAASmM,SAAT,CAAmB9K,EAAnB,EAAuC;IACrC,IAAIqK,UAAJ,EAAgB;MACd,MAAM,IAAI1I,KAAJ,CAAU,6CAAV,CAAN;IACD;;IACD0I,UAAU,GAAGrK,EAAbqK;IACA,OAAO,MAAK;MACVA,UAAU,GAAG,IAAbA;IADF;EA1JyC;;;EAgK3C,SAAS2E,WAAT,CAAqBC,QAArB,EAAmD;IACjDtQ,KAAK,GACAA,oBACAsQ,QADAtQ,CADLA;IAIA0L,UAAU,IAAV,0BAAU,CAAG1L,KAAH,CAAV0L;EArKyC;EAyK3C;EACA;EACA;EACA;;;EACA,SAAS6E,kBAAT,CACE9B,aADF,EAEEvO,QAFF,EAGEoQ,QAHF,EAG4E;IAE1E;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIE,cAAc,GAChBxQ,KAAK,CAAC8O,UAAN9O,IAAoB,IAApBA,IACAA,KAAK,CAAC0O,UAAN1O,CAAiBgN,UAAjBhN,IAA+B,IAD/BA,IAEAA,KAAK,CAAC0O,UAAN1O,CAAiBA,KAAjBA,KAA2B,SAH7B,CAV0E;;IAgB1E,IAAIyQ,aAAa,GAAGH,QAAQ,CAAClC,UAATkC,GAChB;MACElC,UAAU,EAAEsC,eAAe,CACzB1Q,KAAK,CAACoO,UADmB,EAEzBkC,QAAQ,CAAClC,UAFgB,EAGzBkC,QAAQ,CAACvL,OAATuL,IAAoB,EAHK;IAD7B,CADgBA,GAQhB,EARJ;IAUAD,WAAW,CAILG,2BAAc,GAAG,EAAH,GAAQ;MAAE1B,UAAU,EAAE;IAAd,CAAtB0B,EACDF,QADCE,EAEDC,aAFCD,EAJK;MAOT/B,aAPS;MAQTvO,QARS;MASTqO,WAAW,EAAE,IATJ;MAUTG,UAAU,EAAE3B,eAVH;MAWT8B,YAAY,EAAE,MAXL;MAYT;MACAF,qBAAqB,EAAE3O,KAAK,CAAC0O,UAAN1O,CAAiBmN,QAAjBnN,GACnB,KADmBA,GAEnB2Q,sBAAsB,CAACzQ,QAAD,EAAWoQ,QAAQ,CAACvL,OAATuL,IAAoBtQ,KAAK,CAAC+E,OAArC,CAfjB;MAgBT;MACA6J,mBAAmB,EAAEM;IAjBZ,CAILsB,CAJK,CAAXH;IAoBA,IAAIjB,2BAAJ,EAAiC,CAAjC,KAEO,IAAIX,aAAa,KAAKwB,MAAa,CAACzQ,GAApC,EAAyC,CAAzC,KAEA,IAAIiP,aAAa,KAAKwB,MAAa,CAACpP,IAApC,EAA0C;MAC/CiK,IAAI,CAACrK,OAALqK,CAAalK,IAAbkK,CAAkB5K,QAAlB4K,EAA4B5K,QAAQ,CAACF,KAArC8K;IADK,OAEA,IAAI2D,aAAa,KAAKwB,MAAa,CAAChP,OAApC,EAA6C;MAClD6J,IAAI,CAACrK,OAALqK,CAAa9J,OAAb8J,CAAqB5K,QAArB4K,EAA+B5K,QAAQ,CAACF,KAAxC8K;IArDwE;;IAyD1EmE,aAAa,GAAG,IAAhBA;IACAC,kBAAkB,GAAG,IAArBA;IACAE,2BAA2B,GAAG,KAA9BA;IACAC,sBAAsB,GAAG,KAAzBA;IACAC,uBAAuB,GAAG,EAA1BA;IACAC,qBAAqB,GAAG,EAAxBA;EA9OyC;EAkP3C;;;EACA,eAAeqB,QAAf,CACEpN,IADF,EAEEqN,IAFF,EAE8B;IAE5B,IAAI,OAAOrN,IAAP,KAAgB,QAApB,EAA8B;MAC5BsH,IAAI,CAACrK,OAALqK,CAAa5J,EAAb4J,CAAgBtH,IAAhBsH;MACA;IACD;;IAED,IAAI;MACFtH,IAAI,EAAEsN,cADJ;MAEFC,UAFE;MAGF9M;IAHE,IAIA+M,wBAAwB,CAC1B,OAAOxN,IAAP,KAAgB,QAAhB,GAA2BzB,SAAS,CAACyB,IAAD,CAApC,GAA6CA,IADnB,EAE1BqN,IAF0B,CAJ5B;IASA,IAAI3Q,QAAQ,GAAGC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiB4Q,cAAjB,EAAiCD,IAAjC,QAAiCA,GAAjC,MAAiCA,OAAI,CAAE7Q,KAAvC,CAA7B;IACA,IAAIyO,aAAa,GACf,KAAI,QAAJoC,gBAAI,CAAE7P,OAAN,MAAkB,IAAlB,IAA0B+P,UAAU,IAAI,IAAxC,GACId,MAAa,CAAChP,OADlB,GAEIgP,MAAa,CAACpP,IAHpB;IAIA,IAAIoQ,WAAW,GACbJ,IAAI,IAAI,iBAAiBA,IAAzBA,GAAgCA,IAAI,CAACI,WAArCJ,GAAmDzR,SADrD;IAGA,OAAO,MAAM4Q,eAAe,CAACvB,aAAD,EAAgBvO,QAAhB,EAA0B;MACpD6Q,UADoD;MAEpD;MACA;MACAG,YAAY,EAAEjN,KAJsC;MAKpDgN,WALoD;MAMpDjQ,OAAO,EAAE6P,IAAF,IAAEA,oBAAI,CAAE7P;IANqC,CAA1B,CAA5B;EA7QyC;EAwR3C;EACA;;;EACA,SAASmQ,UAAT,GAAmB;IACjB;IACA;IACA9B,sBAAsB,GAAG,IAAzBA,CAHiB;IAKjB;;IACAC,uBAAuB,CAAC1O,IAAxB0O,CAA6B,GAAG8B,qBAAqB,EAArD9B;IACAe,WAAW,CAAC;MAAExB,YAAY,EAAE;IAAhB,CAAD,CAAXwB,CAPiB;IAUjB;;IACA,IAAIrQ,KAAK,CAAC0O,UAAN1O,CAAiBA,KAAjBA,KAA2B,YAA/B,EAA6C;MAC3C;IAZe;IAgBjB;IACA;;;IACA,IAAIA,KAAK,CAAC0O,UAAN1O,CAAiBA,KAAjBA,KAA2B,MAA/B,EAAuC;MACrCgQ,eAAe,CAAChQ,KAAK,CAACyO,aAAP,EAAsBzO,KAAK,CAACE,QAA5B,EAAsC;QACnDmR,8BAA8B,EAAE;MADmB,CAAtC,CAAfrB;MAGA;IAtBe;IA0BjB;IACA;;;IACAA,eAAe,CACbf,aAAa,IAAIjP,KAAK,CAACyO,aADV,EAEbzO,KAAK,CAAC0O,UAAN1O,CAAiBE,QAFJ,EAGb;MAAEoR,kBAAkB,EAAEtR,KAAK,CAAC0O;IAA5B,CAHa,CAAfsB;EAtTyC;EA8T3C;EACA;;;EACA,eAAeA,eAAf,CACEvB,aADF,EAEEvO,QAFF,EAGE2Q,IAHF,EAUG;IAAA,4BAED;;;IACA,iGAA6BV,KAA7B;IACAlB,aAAa,GAAGR,aAAhBQ,CAJC;IAOD;;IACAG,2BAA2B,GAAG,KAAI,IAAJ,oBAAI,CAAEiC,8BAAN,MAAyC,IAAvEjC,CARC;;IAWDmC,kBAAkB,CAACvR,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAAC+E,OAAvB,CAAlBwM,CAXC;;IAcDrC,kBAAkB,GAAG,KAAI,QAAJ2B,gBAAI,CAAEI,WAAN,MAAsB,KAA3C/B;IAEA,IAAIsC,iBAAiB,GAAGX,IAAH,IAAGA,oBAAI,CAAES,kBAA9B;IACA,IAAIvM,OAAO,GAAGR,WAAW,CAAC+I,UAAD,EAAapN,QAAb,EAAuB4K,IAAI,CAACpG,QAA5B,CAAzB,CAjBC;;IAoBD,IAAI,CAACK,OAAL,EAAc;MACZ,IAAI;QACFA,OAAO,EAAE0M,eADP;QAEFpM,KAFE;QAGFpB;MAHE,IAIA8J,kBAAkB,CAACT,UAAD,CAJtB,CADY;;MAOZ8D,qBAAqB;MACrBb,kBAAkB,CAAC9B,aAAD,EAAgBvO,QAAhB,EAA0B;QAC1C6E,OAAO,EAAE0M,eADiC;QAE1CrD,UAAU,EAAE,EAF8B;QAG1CD,MAAM,EAAE;UACN,CAAC9I,KAAK,CAAC2I,EAAP,GAAY/J;QADN;MAHkC,CAA1B,CAAlBsM;MAOA;IAnCD;;;IAuCD,IAAImB,gBAAgB,CAAC1R,KAAK,CAACE,QAAP,EAAiBA,QAAjB,CAApB,EAAgD;MAC9CqQ,kBAAkB,CAAC9B,aAAD,EAAgBvO,QAAhB,EAA0B;QAC1C6E;MAD0C,CAA1B,CAAlBwL;MAGA;IA3CD;;;IA+CD,IAAIoB,iBAAiB,GAAqB,IAA1C;IACA,IAAIT,YAAY,GAAqB,IAArC;;IAEA,IAAIL,IAAJ,QAAIA,QAAI,CAAEK,YAAV,EAAwB;MACtB;MACA;MACA;MACA;MACAA,YAAY,GAAG;QACb,CAACU,mBAAmB,CAAC7M,OAAD,CAAnB6M,CAA6BvM,KAA7BuM,CAAmC5D,EAApC,GAAyC6C,IAAI,CAACK;MADjC,CAAfA;IALF,OAQO,IAAIL,IAAJ,QAAIA,QAAI,CAAEE,UAAV,EAAsB;MAC3B,IAAIc,YAAY,GAAG,MAAMC,YAAY,CACnCrD,aADmC,EAEnCvO,QAFmC,EAGnC2Q,IAAI,CAACE,UAH8B,EAInChM,OAJmC,EAKnC;QAAE/D,OAAO,EAAE6P,IAAI,CAAC7P;MAAhB,CALmC,CAArC;;MAQA,IAAI6Q,YAAY,CAACE,cAAjB,EAAiC;QAC/B;MACD;;MAEDJ,iBAAiB,GAAGE,YAAY,CAACF,iBAAbE,IAAkC,IAAtDF;MACAT,YAAY,GAAGW,YAAY,CAACG,kBAAbH,IAAmC,IAAlDX;;MACA,IAAIxC,UAAU;QACZ1O,KAAK,EAAE,SADK;QAEZE;MAFY,GAGT2Q,IAAI,CAACE,UAHI,CAAd;;MAKAS,iBAAiB,GAAG9C,UAApB8C;IA9ED;;;IAkFD,IAAI;MAAEO,cAAF;MAAkB3D,UAAlB;MAA8BD;IAA9B,IAAyC,MAAM8D,aAAa,CAC9DxD,aAD8D,EAE9DvO,QAF8D,EAG9D2Q,IAH8D,IAG9DA,oBAAI,CAAEE,UAHwD,EAI9DhM,OAJ8D,EAK9DyM,iBAL8D,EAM9DG,iBAN8D,EAO9DT,YAP8D,CAAhE;;IAUA,IAAIa,cAAJ,EAAoB;MAClB;IACD;;IAEDxB,kBAAkB,CAAC9B,aAAD,EAAgBvO,QAAhB,EAA0B;MAC1C6E,OAD0C;MAE1CqJ,UAF0C;MAG1CD;IAH0C,CAA1B,CAAlBoC;EA1ayC;EAkb3C;;;EACA,eAAeuB,YAAf,CACErD,aADF,EAEEvO,QAFF,EAGE6Q,UAHF,EAIEhM,OAJF,EAKE8L,IALF,EAK8B;IAE5BxB,sBAAsB,GAAG,IAAzBA,CAF4B;IAK5B;;IACAC,uBAAuB,CAAC1O,IAAxB0O,CAA6B,GAAG8B,qBAAqB,EAArD9B,EAN4B;;IAS5BO,gBAAgB,CAACzK,OAAjByK,CAAyB,QAAgB5P,GAAhB,KAAuB;MAC9C,IAAIuP,gBAAgB,CAACrE,GAAjBqE,CAAqBvP,GAArBuP,CAAJ,EAA+B;QAC7BD,qBAAqB,CAAC3O,IAAtB2O,CAA2BtP,GAA3BsP;QACA2C,YAAY,CAACjS,GAAD,CAAZiS;MACD;IAJH;;IAOA,IACEnN,OAAO,CAACA,OAAO,CAACzF,MAARyF,GAAiB,CAAlB,CAAPA,CAA4BM,KAA5BN,CAAkC7F,KAAlC6F,IACA,CAACoN,kBAAkB,CAACjS,QAAQ,CAACuB,MAAV,CAFrB,EAGE;MACA;MACA;MACA;MACAsD,OAAO,GAAGA,OAAO,CAACrC,KAARqC,CAAc,CAAdA,EAAiB,CAAC,CAAlBA,CAAVA;IAvB0B;;;IA2B5B,IAAI2J,UAAU;MACZ1O,KAAK,EAAE,YADK;MAEZE;IAFY,GAGT6Q,UAHS,CAAd;;IAKAV,WAAW,CAAC;MAAE3B;IAAF,CAAD,CAAX2B,CAhC4B;;IAmC5B,IAAI+B,MAAJ;IAEA,IAAIC,WAAW,GAAGtN,OAAO,CAACrC,KAARqC,CAAc,CAAC,CAAfA,EAAkB,CAAlBA,CAAlB;;IACA,IAAI,CAACsN,WAAW,CAAChN,KAAZgN,CAAkB9S,MAAvB,EAA+B;MAC7BuD,OAAO,CAACC,IAARD,CACE,0EACE,6DADF,UAEMpC,UAAU,CAACR,QAAD,CAFhB,GADF,GACE,CADF4C;MAKAsP,MAAM,GAAG;QACPE,IAAI,EAAEhO,UAAU,CAACL,KADV;QAEPA,KAAK,EAAE,IAAI2I,aAAJ,CACL,GADK,EAEL,oBAFK,EAGmBlM,oCAAU,CAACR,QAAD,CAAVQ,GAHnB;MAFA,CAAT0R;IANF,OAcO;MACL;MACA,IAAIG,qBAAqB,GAAG,IAAIC,eAAJ,EAA5B;MACArD,2BAA2B,GAAGoD,qBAA9BpD;MAEAiD,MAAM,GAAG,MAAMK,kBAAkB,CAC/BJ,WAD+B,EAE/BnS,QAF+B,EAG/BqS,qBAAqB,CAACG,MAHS,EAI/B3B,UAJ+B,CAAjCqB;;MAOA,IAAIG,qBAAqB,CAACG,MAAtBH,CAA6BI,OAAjC,EAA0C;QACxC,OAAO;UAAEZ,cAAc,EAAE;QAAlB,CAAP;MAbG;MAiBL;MACA;;;MACA5C,2BAA2B,GAAG,IAA9BA;IAvE0B;;;IA2E5B,IAAIyD,gBAAgB,CAACR,MAAD,CAApB,EAA8B;MAC5B,IAAIS,kBAAkB;QACpB7S,KAAK,EAAE,SADa;QAEpBE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBkS,MAAM,CAAClS,QAAxB;MAFJ,GAGjB6Q,UAHiB,CAAtB,CAD4B;MAO5B;MACA;MACA;;;MACA,IAAI+B,MAAM,GAAG,KAAI,QAAJjC,gBAAI,CAAE7P,OAAN,MAAkB,IAA/B;MACA,MAAM+R,uBAAuB,CAACX,MAAD,EAASS,kBAAT,EAA6BC,MAA7B,CAA7B;MACA,OAAO;QAAEf,cAAc,EAAE;MAAlB,CAAP;IACD;;IAED,IAAIiB,aAAa,CAACZ,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAIa,aAAa,GAAGrB,mBAAmB,CAAC7M,OAAD,EAAUsN,WAAW,CAAChN,KAAZgN,CAAkBrE,EAA5B,CAAvC;MACA,OAAO;QACLgE,kBAAkB,EAAE;UAAE,CAACiB,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0BoE,MAAM,CAACnO;QAAnC;MADf,CAAP;IAGD;;IAED,IAAIiP,gBAAgB,CAACd,MAAD,CAApB,EAA8B;MAC5BzM,SAAS,CAAC,KAAD,EAAQ,wCAAR,CAATA;IACD;;IAED,OAAO;MACLgM,iBAAiB,EAAE;QAAE,CAACU,WAAW,CAAChN,KAAZgN,CAAkBrE,EAAnB,GAAwBoE,MAAM,CAACvH;MAAjC;IADd,CAAP;EA/hByC;EAqiB3C;;;EACA,eAAeoH,aAAf,CACExD,aADF,EAEEvO,QAFF,EAGE6Q,UAHF,EAIEhM,OAJF,EAKEuM,kBALF,EAMEK,iBANF,EAOET,YAPF,EAOgC;IAE9B;IACA,IAAIM,iBAAiB,GAAGF,kBAAxB;;IAEA,IAAI,CAACE,iBAAL,EAAwB;MACtB,IAAI9C,UAAU,GAAgC;QAC5C1O,KAAK,EAAE,SADqC;QAE5CE,QAF4C;QAG5C8M,UAAU,EAAE5N,SAHgC;QAI5C6N,UAAU,EAAE7N,SAJgC;QAK5C8N,WAAW,EAAE9N,SAL+B;QAM5C+N,QAAQ,EAAE/N;MANkC,CAA9C;MAQAoS,iBAAiB,GAAG9C,UAApB8C;IACD;;IAED,IAAI,CAAC2B,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DrT,KAD0D,EAE1D+E,OAF0D,EAG1DgM,UAH0D,EAI1D7Q,QAJ0D,EAK1DmP,sBAL0D,EAM1DC,uBAN0D,EAO1DC,qBAP0D,EAQ1DoC,iBAR0D,EAS1DT,YAT0D,EAU1DrB,gBAV0D,CAA5D,CAjB8B;IA+B9B;IACA;;IACAyD,+BAA+B,CAACvO,OAAD,EAAUoO,aAAV,CAA/BG,CAjC8B;;IAoC9B,IAAIH,aAAa,CAAC7T,MAAd6T,KAAyB,CAAzBA,IAA8BC,oBAAoB,CAAC9T,MAArB8T,KAAgC,CAAlE,EAAqE;MACnE7C,kBAAkB,CAAC9B,aAAD,EAAgBvO,QAAhB,EAA0B;QAC1C6E,OAD0C;QAE1CqJ,UAAU,EAAEsC,eAAe,CAAC1Q,KAAK,CAACoO,UAAP,EAAmB,EAAnB,EAAuBrJ,OAAvB,CAFe;QAG1C;QACAoJ,MAAM,EAAE+C,YAAY,IAAI,IAJkB;QAK1CpC,UAAU,EAAE6C,iBAAiB,IAAI;MALS,CAA1B,CAAlBpB;MAOA,OAAO;QAAEwB,cAAc,EAAE;MAAlB,CAAP;IA5C4B;IAgD9B;IACA;IACA;;;IACA,IAAI,CAAC3C,2BAAL,EAAkC;MAChCgE,oBAAoB,CAAChO,OAArBgO,CAA6BG,KAAU;QAAA;;QAAA,IAAT,CAACtT,GAAD,IAASsT;QACrC,IAAIC,mBAAmB,GAA6B;UAClDxT,KAAK,EAAE,SAD2C;UAElD6K,IAAI,yBAAE7K,KAAK,CAAC+O,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,CAAF,KAAE,IAAF,GAAE,MAAF,GAAE0T,oBAAyB7I,IAFmB;UAGlDmC,UAAU,EAAE5N,SAHsC;UAIlD6N,UAAU,EAAE7N,SAJsC;UAKlD8N,WAAW,EAAE9N,SALqC;UAMlD+N,QAAQ,EAAE/N;QANwC,CAApD;QAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwBwT,mBAAxBxT;MATF;MAWAqQ,WAAW;QACT3B,UAAU,EAAE8C,iBADH;QAET1C,UAAU,EAAE6C,iBAAiB,IAAI3R,KAAK,CAAC8O,UAA3B6C,IAAyC;MAF5C,GAGLyB,oBAAoB,CAAC9T,MAArB8T,GAA8B,CAA9BA,GACA;QAAErE,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;MAAZ,CADAqE,GAEA,EALK,EAAX/C;IA/D4B;;;IAyE9B,IAAIsD,eAAe,GAAG,IAAInB,eAAJ,EAAtB;IACArD,2BAA2B,GAAGwE,eAA9BxE;IACAO,uBAAuB,GAAG,EAAED,kBAA5BC;IACA0D,oBAAoB,CAAChO,OAArBgO,CAA6BQ;MAAA,IAAC,CAAC3T,GAAD,IAAD2T;MAAA,OAC3BpE,gBAAgB,CAACpE,GAAjBoE,CAAqBvP,GAArBuP,EAA0BmE,eAA1BnE,CAD2B;IAA7B;IAIA,IAAI;MAAEqE,OAAF;MAAWC,aAAX;MAA0BC;IAA1B,IACF,MAAMC,yBAAyB,CAC7Bb,aAD6B,EAE7BC,oBAF6B,EAG7BlT,QAH6B,EAI7ByT,eAAe,CAACjB,MAJa,CADjC;;IAQA,IAAIiB,eAAe,CAACjB,MAAhBiB,CAAuBhB,OAA3B,EAAoC;MAClC,OAAO;QAAEZ,cAAc,EAAE;MAAlB,CAAP;IAzF4B;IA6F9B;IACA;;;IACA5C,2BAA2B,GAAG,IAA9BA;IACAiE,oBAAoB,CAAChO,OAArBgO,CAA6Ba;MAAA,IAAC,CAAChU,GAAD,IAADgU;MAAA,OAAWzE,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP,CAAX;IAA7B,GAhG8B;;IAmG9B,IAAI7C,QAAQ,GAAGuH,YAAY,CAACL,OAAD,CAA3B;;IACA,IAAIlH,QAAJ,EAAc;MACZ,IAAIkG,kBAAkB,GAAGsB,iBAAiB,CAACnU,KAAD,EAAQ2M,QAAR,CAA1C;MACA,MAAMoG,uBAAuB,CAACpG,QAAD,EAAWkG,kBAAX,CAA7B;MACA,OAAO;QAAEd,cAAc,EAAE;MAAlB,CAAP;IAvG4B;;;IA2G9B,IAAI;MAAE3D,UAAF;MAAcD;IAAd,IAAyBiG,iBAAiB,CAC5CpU,KAD4C,EAE5C+E,OAF4C,EAG5CoO,aAH4C,EAI5CW,aAJ4C,EAK5C5C,YAL4C,EAM5CkC,oBAN4C,EAO5CW,cAP4C,EAQ5CjE,eAR4C,CAA9C,CA3G8B;;IAuH9BA,eAAe,CAAC1K,OAAhB0K,CAAwB,CAACuE,YAAD,EAAeC,OAAf,KAA0B;MAChDD,YAAY,CAAClI,SAAbkI,CAAuB,CAAC1B,OAAD,EAAU4B,aAAV,EAAyB1J,IAAzB,KAAiC;QACtD,IAAI8H,OAAJ,EAAa;UACX7C,eAAe,CAAC9D,MAAhB8D,CAAuBwE,OAAvBxE;UACA;QAHoD;;;QAMtDnK,SAAS,CAAC4O,aAAD,EAAgB,oCAAhB,CAAT5O;QACA0K,WAAW,CAAC;UACVjC,UAAU,eACLpO,KAAK,CAACoO,UADD;YAER,CAACkG,OAAD,GACKtU,kBAAK,CAACoO,UAANpO,CAAiBsU,OAAjBtU,GADL;cAEE,CAACuU,aAAD,GAAiB1J;YAFnB,CACK7K;UAHG;QADA,CAAD,CAAXqQ,CAPsD;;QAiBtD,IAAIgE,YAAY,CAAC9H,IAAjB,EAAuB;UACrBuD,eAAe,CAAC9D,MAAhB8D,CAAuBwE,OAAvBxE;QACD;MAnBH;IADF;IAwBA0E,sBAAsB;IACtB,IAAIC,kBAAkB,GAAGC,oBAAoB,CAAChF,uBAAD,CAA7C;IAEA;MACEtB,UADF;MAEED;IAFF,GAGMsG,kBAAkB,IAAIrB,oBAAoB,CAAC9T,MAArB8T,GAA8B,CAApDqB,GACA;MAAE1F,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;IAAZ,CADA0F,GAEA,EALN;EAOD;;EAED,SAASE,UAAT,CAAiC1U,GAAjC,EAA4C;IAC1C,OAAOD,KAAK,CAAC+O,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,KAA2BoN,YAAlC;EAzsByC;;;EA6sB3C,SAASwH,KAAT,CACE3U,GADF,EAEEqU,OAFF,EAGEjS,IAHF,EAIEwO,IAJF,EAI8B;IAAA;;IAE5B,IAAI,OAAO2B,eAAP,KAA2B,WAA/B,EAA4C;MAC1C,MAAM,IAAIxP,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN;IAKD;;IAED,IAAIwM,gBAAgB,CAACrE,GAAjBqE,CAAqBvP,GAArBuP,CAAJ,EAA+B0C,YAAY,CAACjS,GAAD,CAAZiS;IAE/B,IAAInN,OAAO,GAAGR,WAAW,CAAC+I,UAAD,EAAajL,IAAb,EAAmByI,IAAI,CAACpG,QAAxB,CAAzB;;IACA,IAAI,CAACK,OAAL,EAAc;MACZ,IAAIkO,aAAa,GAAGrB,mBAAmB,CAAC5R,KAAK,CAAC+E,OAAP,EAAgBuP,OAAhB,CAAvC;MACAtU,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwBoN,YAAxBpN;MACAqQ,WAAW,CAAC;QACVlC,MAAM,EAAE;UACN,CAAC8E,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0B,IAAIpB,aAAJ,CAAkB,GAAlB,EAAuB,WAAvB,EAAoC,IAApC;QADpB,CADE;QAIVmC,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;MAJA,CAAD,CAAXsB;MAMA;IACD;;IAED,IAAIxI,KAAK,GACP9C,OAAO,CAACA,OAAO,CAACzF,MAARyF,GAAiB,CAAlB,CAAPA,CAA4BM,KAA5BN,CAAkC7F,KAAlC6F,IACA,CAACoN,kBAAkB,CAACpQ,SAAS,CAACM,IAAD,CAATN,CAAgBN,MAAhBM,IAA0B,EAA3B,CADnBgD,GAEIA,OAAO,CAACrC,KAARqC,CAAc,CAAC,CAAfA,EAAkB,CAAlBA,CAFJA,GAGIA,OAAO,CAACrC,KAARqC,CAAc,CAAC,CAAfA,EAAkB,CAAlBA,CAJN;IAMA,IAAI;MAAEvB,IAAF;MAAQuN;IAAR,IAAuBC,wBAAwB,CAACjP,SAAS,CAACM,IAAD,CAAV,EAAkBwO,IAAlB,CAAnD;;IAEA,IAAIE,UAAJ,EAAgB;MACd8D,mBAAmB,CAAC5U,GAAD,EAAMqU,OAAN,EAAejS,IAAf,EAAqBwF,KAArB,EAA4BkJ,UAA5B,CAAnB8D;MACA;IACD;;IAED,IAAIC,cAAc,GAA6B;MAC7C9U,KAAK,EAAE,SADsC;MAE7CgN,UAAU,EAAE5N,SAFiC;MAG7C6N,UAAU,EAAE7N,SAHiC;MAI7C8N,WAAW,EAAE9N,SAJgC;MAK7C+N,QAAQ,EAAE/N,SALmC;MAM7CyL,IAAI,EAAE,8BAAK,CAACkE,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,MAAyB6K,IAAzB7K,GAAyB6K,MAAzB7K,GAAyB6K,yBAAzB,KAAiCzL;IANM,CAA/C;IAQA2V,mBAAmB,CAAC9U,GAAD,EAAMqU,OAAN,EAAe3T,UAAU,CAAC6C,IAAD,CAAzB,EAAiCqE,KAAjC,EAAwCiN,cAAxC,CAAnBC;EA/vByC;EAmwB3C;;;EACA,eAAeF,mBAAf,CACE5U,GADF,EAEEqU,OAFF,EAGEjS,IAHF,EAIEwF,KAJF,EAKEkJ,UALF,EAKwB;IAAA;;IAEtB1B,sBAAsB,GAAG,IAAzBA;IACAQ,gBAAgB,CAAC7D,MAAjB6D,CAAwB5P,GAAxB4P,EAHsB;IAMtB;;IACAP,uBAAuB,CAAC1O,IAAxB0O,CAA6B,GAAG8B,qBAAqB,EAArD9B,EAPsB;;IAUtBO,gBAAgB,CAACzK,OAAjByK,CAAyB,QAAgB5P,GAAhB,KAAuB;MAC9C,IAAIuP,gBAAgB,CAACrE,GAAjBqE,CAAqBvP,GAArBuP,CAAJ,EAA+B;QAC7BD,qBAAqB,CAAC3O,IAAtB2O,CAA2BtP,GAA3BsP;QACA2C,YAAY,CAACjS,GAAD,CAAZiS;MACD;IAJH,GAVsB;;IAkBtB,IAAI8C,OAAO;MACThV,KAAK,EAAE;IADE,GAEN+Q,UAFM;MAGTlG,IAAI,EAAE,8BAAK,CAACkE,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,MAAyB6K,IAAzB7K,GAAyB6K,MAAzB7K,GAAyB6K,yBAAzB,KAAiCzL;IAH9B,EAAX;;IAKAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwBgV,OAAxBhV;IACAqQ,WAAW,CAAC;MAAEtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;IAAZ,CAAD,CAAXsB,CAxBsB;;IA2BtB,IAAIsD,eAAe,GAAG,IAAInB,eAAJ,EAAtB;IACAhD,gBAAgB,CAACpE,GAAjBoE,CAAqBvP,GAArBuP,EAA0BmE,eAA1BnE;IAEA,IAAIyF,YAAY,GAAG,MAAMxC,kBAAkB,CACzC5K,KADyC,EAEzCxF,IAFyC,EAGzCsR,eAAe,CAACjB,MAHyB,EAIzC3B,UAJyC,CAA3C;;IAOA,IAAI4C,eAAe,CAACjB,MAAhBiB,CAAuBhB,OAA3B,EAAoC;MAClC;MACA;MACA,IAAInD,gBAAgB,CAACiE,GAAjBjE,CAAqBvP,GAArBuP,MAA8BmE,eAAlC,EAAmD;QACjDnE,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP;MACD;;MACD;IACD;;IAED,IAAIoD,gBAAgB,CAACqC,YAAD,CAApB,EAAoC;MAClCzF,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP;MACAI,gBAAgB,CAAC/D,GAAjB+D,CAAqB3P,GAArB2P;;MACA,IAAIkF,cAAc;QAChB9U,KAAK,EAAE;MADS,GAEb+Q,UAFa;QAGhBlG,IAAI,EAAEzL;MAHU,EAAlB;;MAKAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwB8U,cAAxB9U;MACAqQ,WAAW,CAAC;QAAEtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;MAAZ,CAAD,CAAXsB;;MAEA,IAAIwC,kBAAkB;QACpB7S,KAAK,EAAE,SADa;QAEpBE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiB+U,YAAY,CAAC/U,QAA9B;MAFJ,GAGjB6Q,UAHiB,CAAtB;;MAKA,MAAMgC,uBAAuB,CAACkC,YAAD,EAAepC,kBAAf,CAA7B;MACA;IA/DoB;;;IAmEtB,IAAIG,aAAa,CAACiC,YAAD,CAAjB,EAAiC;MAC/B,IAAIhC,aAAa,GAAGrB,mBAAmB,CAAC5R,KAAK,CAAC+E,OAAP,EAAgBuP,OAAhB,CAAvC;MACAlE,aAAa,CAACnQ,GAAD,CAAbmQ;MACAC,WAAW,CAAC;QACVtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd,CADA;QAEVZ,MAAM,EAAE;UACN,CAAC8E,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0BiH,YAAY,CAAChR;QADjC;MAFE,CAAD,CAAXoM;MAMA;IACD;;IAED,IAAI6C,gBAAgB,CAAC+B,YAAD,CAApB,EAAoC;MAClCtP,SAAS,CAAC,KAAD,EAAQ,wCAAR,CAATA;IAhFoB;IAoFtB;;;IACA,IAAI7E,YAAY,GAAGd,KAAK,CAAC0O,UAAN1O,CAAiBE,QAAjBF,IAA6BA,KAAK,CAACE,QAAtD;IACA,IAAI6E,OAAO,GACT/E,KAAK,CAAC0O,UAAN1O,CAAiBA,KAAjBA,KAA2B,MAA3BA,GACIuE,WAAW,CAAC+I,UAAD,EAAatN,KAAK,CAAC0O,UAAN1O,CAAiBE,QAA9B,EAAwC4K,IAAI,CAACpG,QAA7C,CADf1E,GAEIA,KAAK,CAAC+E,OAHZ;IAKAY,SAAS,CAACZ,OAAD,EAAU,8CAAV,CAATY;IAEA,IAAIuP,MAAM,GAAG,EAAEzF,kBAAf;IACAE,cAAc,CAACvE,GAAfuE,CAAmB1P,GAAnB0P,EAAwBuF,MAAxBvF;;IAEA,IAAIwF,WAAW;MACbnV,KAAK,EAAE,SADM;MAEb6K,IAAI,EAAEoK,YAAY,CAACpK;IAFN,GAGVkG,UAHU,CAAf;;IAKA/Q,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwBmV,WAAxBnV;IAEA,IAAI,CAACmT,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DrT,KAD0D,EAE1D+E,OAF0D,EAG1DgM,UAH0D,EAI1DjQ,YAJ0D,EAK1DuO,sBAL0D,EAM1DC,uBAN0D,EAO1DC,qBAP0D,EAQ1D;MAAE,CAAC1H,KAAK,CAACxC,KAANwC,CAAYmG,EAAb,GAAkBiH,YAAY,CAACpK;IAAjC,CAR0D,EAS1D,IAT0D;IAU1DgF,gBAV0D,CAA5D,CAvGsB;IAqHtB;IACA;;IACAuD,oBAAoB,CACjBlM,MADHkM,CACUgC;MAAA,IAAC,CAACC,QAAD,IAADD;MAAA,OAAgBC,QAAQ,KAAKpV,GAA7B;IADV,GAEGmF,OAFHgO,CAEWkC,KAAe;MAAA;;MAAA,IAAd,CAACD,QAAD,IAAcC;MACtB,IAAI9B,mBAAmB,GAA6B;QAClDxT,KAAK,EAAE,SAD2C;QAElD6K,IAAI,0BAAE7K,KAAK,CAAC+O,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,CAAF,KAAE,IAAF,GAAE,MAAF,GAAEuV,qBAAyB1K,IAFmB;QAGlDmC,UAAU,EAAE5N,SAHsC;QAIlD6N,UAAU,EAAE7N,SAJsC;QAKlD8N,WAAW,EAAE9N,SALqC;QAMlD+N,QAAQ,EAAE/N;MANwC,CAApD;MAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBqV,QAAnBrV,EAA6BwT,mBAA7BxT;MACAwP,gBAAgB,CAACpE,GAAjBoE,CAAqB6F,QAArB7F,EAA+BmE,eAA/BnE;IAZJ;IAeAa,WAAW,CAAC;MAAEtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;IAAZ,CAAD,CAAXsB;IAEA,IAAI;MAAEwD,OAAF;MAAWC,aAAX;MAA0BC;IAA1B,IACF,MAAMC,yBAAyB,CAC7Bb,aAD6B,EAE7BC,oBAF6B,EAG7BtS,YAH6B,EAI7B6S,eAAe,CAACjB,MAJa,CADjC;;IAQA,IAAIiB,eAAe,CAACjB,MAAhBiB,CAAuBhB,OAA3B,EAAoC;MAClC;IACD;;IAEDhD,cAAc,CAAC3D,MAAf2D,CAAsB1P,GAAtB0P;IACAH,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP;IACA4D,oBAAoB,CAAChO,OAArBgO,CAA6BoC;MAAA,IAAC,CAACH,QAAD,IAADG;MAAA,OAC3BhG,gBAAgB,CAACxD,MAAjBwD,CAAwB6F,QAAxB7F,CAD2B;IAA7B;IAIA,IAAI7C,QAAQ,GAAGuH,YAAY,CAACL,OAAD,CAA3B;;IACA,IAAIlH,QAAJ,EAAc;MACZ,IAAIkG,kBAAkB,GAAGsB,iBAAiB,CAACnU,KAAD,EAAQ2M,QAAR,CAA1C;MACA,MAAMoG,uBAAuB,CAACpG,QAAD,EAAWkG,kBAAX,CAA7B;MACA;IA9JoB;;;IAkKtB,IAAI;MAAEzE,UAAF;MAAcD;IAAd,IAAyBiG,iBAAiB,CAC5CpU,KAD4C,EAE5CA,KAAK,CAAC+E,OAFsC,EAG5CoO,aAH4C,EAI5CW,aAJ4C,EAK5C,IAL4C,EAM5CV,oBAN4C,EAO5CW,cAP4C,EAQ5CjE,eAR4C,CAA9C;IAWA,IAAI2F,WAAW,GAA0B;MACvCzV,KAAK,EAAE,MADgC;MAEvC6K,IAAI,EAAEoK,YAAY,CAACpK,IAFoB;MAGvCmC,UAAU,EAAE5N,SAH2B;MAIvC6N,UAAU,EAAE7N,SAJ2B;MAKvC8N,WAAW,EAAE9N,SAL0B;MAMvC+N,QAAQ,EAAE/N;IAN6B,CAAzC;IAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwByV,WAAxBzV;IAEA,IAAIyU,kBAAkB,GAAGC,oBAAoB,CAACQ,MAAD,CAA7C,CAvLsB;IA0LtB;IACA;;IACA,IACElV,KAAK,CAAC0O,UAAN1O,CAAiBA,KAAjBA,KAA2B,SAA3BA,IACAkV,MAAM,GAAGxF,uBAFX,EAGE;MAAA;;MACA/J,SAAS,CAACsJ,aAAD,EAAgB,yBAAhB,CAATtJ;MACA,iGAA6BwK,KAA7B;MAEAI,kBAAkB,CAACtB,aAAD,EAAgBjP,KAAK,CAAC0O,UAAN1O,CAAiBE,QAAjC,EAA2C;QAC3D6E,OAD2D;QAE3DqJ,UAF2D;QAG3DD,MAH2D;QAI3DY,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;MAJiD,CAA3C,CAAlBwB;IAPF,OAaO;MACL;MACA;MACA;MACAF,WAAW;QACTlC,MADS;QAETC,UAAU,EAAEsC,eAAe,CAAC1Q,KAAK,CAACoO,UAAP,EAAmBA,UAAnB,EAA+BrJ,OAA/B;MAFlB,GAGL0P,kBAAkB,GAAG;QAAE1F,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;MAAZ,CAAH,GAA2C,EAHxD,EAAXsB;MAKAhB,sBAAsB,GAAG,KAAzBA;IACD;EA59BwC;;;EAg+B3C,eAAe0F,mBAAf,CACE9U,GADF,EAEEqU,OAFF,EAGEjS,IAHF,EAIEwF,KAJF,EAKEiN,cALF,EAKyB;IAEvB;IACA9U,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwB8U,cAAxB9U;IACAqQ,WAAW,CAAC;MAAEtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;IAAZ,CAAD,CAAXsB,CAJuB;IAOvB;;IACAR,gBAAgB,CAACzE,GAAjByE,CAAqB5P,GAArB4P,EAA0B,CAACxN,IAAD,EAAOwF,KAAP,CAA1BgI,EARuB;;IAWvB,IAAI8D,eAAe,GAAG,IAAInB,eAAJ,EAAtB;IACAhD,gBAAgB,CAACpE,GAAjBoE,CAAqBvP,GAArBuP,EAA0BmE,eAA1BnE;IACA,IAAI4C,MAAM,GAAe,MAAMK,kBAAkB,CAC/C5K,KAD+C,EAE/CxF,IAF+C,EAG/CsR,eAAe,CAACjB,MAH+B,CAAjD,CAbuB;IAoBvB;IACA;IACA;;IACA,IAAIQ,gBAAgB,CAACd,MAAD,CAApB,EAA8B;MAC5BA,MAAM,GACJ,CAAC,MAAMsD,mBAAmB,CAACtD,MAAD,EAASuB,eAAe,CAACjB,MAAzB,CAA1B,KAA+DN,MADjEA;IAxBqB;IA6BvB;;;IACA,IAAI5C,gBAAgB,CAACiE,GAAjBjE,CAAqBvP,GAArBuP,MAA8BmE,eAAlC,EAAmD;MACjDnE,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP;IACD;;IAED,IAAImE,eAAe,CAACjB,MAAhBiB,CAAuBhB,OAA3B,EAAoC;MAClC;IAnCqB;;;IAuCvB,IAAIC,gBAAgB,CAACR,MAAD,CAApB,EAA8B;MAC5B,IAAIS,kBAAkB,GAAGsB,iBAAiB,CAACnU,KAAD,EAAQoS,MAAR,CAA1C;MACA,MAAMW,uBAAuB,CAACX,MAAD,EAASS,kBAAT,CAA7B;MACA;IA1CqB;;;IA8CvB,IAAIG,aAAa,CAACZ,MAAD,CAAjB,EAA2B;MACzB,IAAIa,aAAa,GAAGrB,mBAAmB,CAAC5R,KAAK,CAAC+E,OAAP,EAAgBuP,OAAhB,CAAvC;MACAtU,KAAK,CAAC+O,QAAN/O,CAAegM,MAAfhM,CAAsBC,GAAtBD,EAFyB;MAIzB;MACA;;MACAqQ,WAAW,CAAC;QACVtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd,CADA;QAEVZ,MAAM,EAAE;UACN,CAAC8E,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0BoE,MAAM,CAACnO;QAD3B;MAFE,CAAD,CAAXoM;MAMA;IACD;;IAED1K,SAAS,CAAC,CAACuN,gBAAgB,CAACd,MAAD,CAAlB,EAA4B,iCAA5B,CAATzM,CA7DuB;;IAgEvB,IAAI8P,WAAW,GAA0B;MACvCzV,KAAK,EAAE,MADgC;MAEvC6K,IAAI,EAAEuH,MAAM,CAACvH,IAF0B;MAGvCmC,UAAU,EAAE5N,SAH2B;MAIvC6N,UAAU,EAAE7N,SAJ2B;MAKvC8N,WAAW,EAAE9N,SAL0B;MAMvC+N,QAAQ,EAAE/N;IAN6B,CAAzC;IAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwByV,WAAxBzV;IACAqQ,WAAW,CAAC;MAAEtB,QAAQ,EAAE,IAAIC,GAAJ,CAAQhP,KAAK,CAAC+O,QAAd;IAAZ,CAAD,CAAXsB;EA9iCyC;;;EAkjC3C,eAAe0C,uBAAf,CACEpG,QADF,EAEE+B,UAFF,EAGEoE,MAHF,EAGgB;IAAA,IAAdA,MAAc;MAAdA,MAAc,GAAL,KAATA;IAAc;;IAEd,IAAInG,QAAQ,CAACwE,UAAb,EAAyB;MACvB9B,sBAAsB,GAAG,IAAzBA;IACD;;IACD1J,SAAS,CACP+I,UAAU,CAACxO,QADJ,EAEP,gDAFO,CAATyF;IAIA,MAAMqK,eAAe,CACnB8C,MAAM,GAAG7C,MAAa,CAACpP,IAAjB,GAAwBoP,MAAa,CAAChP,OADzB,EAEnByN,UAAU,CAACxO,QAFQ,EAGnB;MAAEoR,kBAAkB,EAAE5C;IAAtB,CAHmB,CAArB;EAKD;;EAED,eAAesF,yBAAf,CACEb,aADF,EAEEwC,cAFF,EAGEzV,QAHF,EAIEwS,MAJF,EAIqB;IAEnB;IACA;IACA;IACA,IAAImB,OAAO,GAAG,MAAMlI,OAAO,CAACiK,GAARjK,CAAY,CAC9B,GAAGwH,aAAa,CAACnU,GAAdmU,CAAmB9E,CAAD,IAAOoE,kBAAkB,CAACpE,CAAD,EAAInO,QAAJ,EAAcwS,MAAd,CAA3CS,CAD2B,EAE9B,GAAGwC,cAAc,CAAC3W,GAAf2W,CAAmBE;MAAA,IAAC,GAAGxT,IAAH,EAASwF,KAAT,IAADgO;MAAA,OACpBpD,kBAAkB,CAAC5K,KAAD,EAAQxF,IAAR,EAAcqQ,MAAd,CADE;IAAnB,EAF2B,CAAZ/G,CAApB;IAMA,IAAImI,aAAa,GAAGD,OAAO,CAACnR,KAARmR,CAAc,CAAdA,EAAiBV,aAAa,CAAC7T,MAA/BuU,CAApB;IACA,IAAIE,cAAc,GAAGF,OAAO,CAACnR,KAARmR,CAAcV,aAAa,CAAC7T,MAA5BuU,CAArB;IAEA,MAAMiC,sBAAsB,CAC1B3C,aAD0B,EAE1BW,aAF0B,EAG1BpB,MAH0B,EAI1B1S,KAAK,CAACoO,UAJoB,EAK1B0B,eAL0B,CAA5B;IAQA,MAAMgG,sBAAsB,CAC1BH,cAAc,CAAC3W,GAAf2W,CAAmBI;MAAA,IAAC,IAAKlO,KAAL,IAADkO;MAAA,OAAiBlO,KAAjB;IAAnB,EAD0B,EAE1BkM,cAF0B,EAG1BrB,MAH0B,CAA5B;IAMA,OAAO;MAAEmB,OAAF;MAAWC,aAAX;MAA0BC;IAA1B,CAAP;EACD;;EAED,SAAS3D,aAAT,CAAuBnQ,GAAvB,EAAkC;IAChC,IAAIuP,gBAAgB,CAACrE,GAAjBqE,CAAqBvP,GAArBuP,CAAJ,EAA+B0C,YAAY,CAACjS,GAAD,CAAZiS;IAC/BrC,gBAAgB,CAAC7D,MAAjB6D,CAAwB5P,GAAxB4P;IACAF,cAAc,CAAC3D,MAAf2D,CAAsB1P,GAAtB0P;IACAC,gBAAgB,CAAC5D,MAAjB4D,CAAwB3P,GAAxB2P;IACA5P,KAAK,CAAC+O,QAAN/O,CAAegM,MAAfhM,CAAsBC,GAAtBD;EACD;;EAED,SAASkS,YAAT,CAAsBjS,GAAtB,EAAiC;IAC/B,IAAI+V,UAAU,GAAGxG,gBAAgB,CAACiE,GAAjBjE,CAAqBvP,GAArBuP,CAAjB;IACA7J,SAAS,CAACqQ,UAAD,EAA2C/V,mCAA3C,CAAT0F;IACAqQ,UAAU,CAAC7F,KAAX6F;IACAxG,gBAAgB,CAACxD,MAAjBwD,CAAwBvP,GAAxBuP;EACD;;EAED,SAASyG,gBAAT,CAA0BC,IAA1B,EAAwC;IACtC,KAAK,IAAIjW,GAAT,IAAgBiW,IAAhB,EAAsB;MACpB,IAAIlB,OAAO,GAAGL,UAAU,CAAC1U,GAAD,CAAxB;MACA,IAAIwV,WAAW,GAA0B;QACvCzV,KAAK,EAAE,MADgC;QAEvC6K,IAAI,EAAEmK,OAAO,CAACnK,IAFyB;QAGvCmC,UAAU,EAAE5N,SAH2B;QAIvC6N,UAAU,EAAE7N,SAJ2B;QAKvC8N,WAAW,EAAE9N,SAL0B;QAMvC+N,QAAQ,EAAE/N;MAN6B,CAAzC;MAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwByV,WAAxBzV;IACD;EACF;;EAED,SAASwU,sBAAT,GAA+B;IAC7B,IAAI2B,QAAQ,GAAG,EAAf;;IACA,KAAK,IAAIlW,GAAT,IAAgB2P,gBAAhB,EAAkC;MAChC,IAAIoF,OAAO,GAAGhV,KAAK,CAAC+O,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,CAAd;MACA2F,SAAS,CAACqP,OAAD,EAA+B/U,0BAA/B,CAAT0F;;MACA,IAAIqP,OAAO,CAAChV,KAARgV,KAAkB,SAAtB,EAAiC;QAC/BpF,gBAAgB,CAAC5D,MAAjB4D,CAAwB3P,GAAxB2P;QACAuG,QAAQ,CAACvV,IAATuV,CAAclW,GAAdkW;MACD;IACF;;IACDF,gBAAgB,CAACE,QAAD,CAAhBF;EACD;;EAED,SAASvB,oBAAT,CAA8B0B,QAA9B,EAA8C;IAC5C,IAAIC,UAAU,GAAG,EAAjB;;IACA,KAAK,IAAI,CAACpW,GAAD,EAAM+N,EAAN,CAAT,IAAsB2B,cAAtB,EAAsC;MACpC,IAAI3B,EAAE,GAAGoI,QAAT,EAAmB;QACjB,IAAIpB,OAAO,GAAGhV,KAAK,CAAC+O,QAAN/O,CAAeyT,GAAfzT,CAAmBC,GAAnBD,CAAd;QACA2F,SAAS,CAACqP,OAAD,EAA+B/U,0BAA/B,CAAT0F;;QACA,IAAIqP,OAAO,CAAChV,KAARgV,KAAkB,SAAtB,EAAiC;UAC/B9C,YAAY,CAACjS,GAAD,CAAZiS;UACAvC,cAAc,CAAC3D,MAAf2D,CAAsB1P,GAAtB0P;UACA0G,UAAU,CAACzV,IAAXyV,CAAgBpW,GAAhBoW;QACD;MACF;IACF;;IACDJ,gBAAgB,CAACI,UAAD,CAAhBJ;IACA,OAAOI,UAAU,CAAC/W,MAAX+W,GAAoB,CAA3B;EACD;;EAED,SAASjF,qBAAT,CACEkF,SADF,EAC0C;IAExC,IAAIC,iBAAiB,GAAa,EAAlC;IACAzG,eAAe,CAAC1K,OAAhB0K,CAAwB,CAAC0G,GAAD,EAAMlC,OAAN,KAAiB;MACvC,IAAI,CAACgC,SAAD,IAAcA,SAAS,CAAChC,OAAD,CAA3B,EAAsC;QACpC;QACA;QACA;QACAkC,GAAG,CAACpK,MAAJoK;QACAD,iBAAiB,CAAC3V,IAAlB2V,CAAuBjC,OAAvBiC;MACD;IAPH;IASA,OAAOA,iBAAP;EAjrCyC;EAqrC3C;;;EACA,SAASjD,+BAAT,CACEvO,OADF,EAEEoO,aAFF,EAGEsD,UAHF,EAGqB;IAEnB,IAAIC,eAAe,GAAG,KAAtB;IACA,OAAOtF,qBAAqB,CAAEkD,OAAD,IAAY;MACvCoC,eAAe,GAAGA,eAAe,IAAIpC,OAAO,KAAKmC,UAAjDC,CADuC;;MAGvC,IAAIC,cAAc,GAAG5R,OAAH,QAAGA,GAAH,MAAGA,UAAO,CAAEkC,IAATlC,CAAesJ,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQL,EAARK,KAAeiG,OAApCvP,CAArB,CAHuC;;MAKvC,IAAI6R,cAAc,GAAGzD,aAAH,IAAGA,6BAAa,CAAElM,IAAfkM,CAAqB9E,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQL,EAARK,KAAeiG,OAA1CnB,CAArB;MACA,OAAO,CAACwD,cAAD,IAAmBC,cAAnB,IAAqCF,eAA5C;IAN0B,EAA5B;EA5rCyC;EAusC3C;;;EACA,SAASG,uBAAT,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAG0C;IAExCvJ,oBAAoB,GAAGqJ,SAAvBrJ;IACAE,iBAAiB,GAAGoJ,WAApBpJ;;IACAD,uBAAuB,GAAGsJ,MAAM,KAAM9W,QAAD,IAAcA,QAAQ,CAACD,GAA5B,CAAhCyN,CAJwC;IAOxC;IACA;;;IACA,IAAI,CAACE,qBAAD,IAA0B5N,KAAK,CAAC0O,UAAN1O,KAAqB+M,eAAnD,EAAoE;MAClEa,qBAAqB,GAAG,IAAxBA;MACA,IAAIqJ,CAAC,GAAGtG,sBAAsB,CAAC3Q,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAAC+E,OAAvB,CAA9B;;MACA,IAAIkS,CAAC,IAAI,IAAT,EAAe;QACb5G,WAAW,CAAC;UAAE1B,qBAAqB,EAAEsI;QAAzB,CAAD,CAAX5G;MACD;IACF;;IAED,OAAO,MAAK;MACV5C,oBAAoB,GAAG,IAAvBA;MACAE,iBAAiB,GAAG,IAApBA;MACAD,uBAAuB,GAAG,IAA1BA;IAHF;EAKD;;EAED,SAAS6D,kBAAT,CACErR,QADF,EAEE6E,OAFF,EAE2B;IAEzB,IAAI0I,oBAAoB,IAAIC,uBAAxBD,IAAmDE,iBAAvD,EAA0E;MACxE,IAAI1N,GAAG,GAAGyN,uBAAuB,CAACxN,QAAD,EAAW6E,OAAX,CAAvB2I,IAA8CxN,QAAQ,CAACD,GAAjE;MACAwN,oBAAoB,CAACxN,GAAD,CAApBwN,GAA4BE,iBAAiB,EAA7CF;IACD;EACF;;EAED,SAASkD,sBAAT,CACEzQ,QADF,EAEE6E,OAFF,EAE2B;IAEzB,IAAI0I,oBAAoB,IAAIC,uBAAxBD,IAAmDE,iBAAvD,EAA0E;MACxE,IAAI1N,GAAG,GAAGyN,uBAAuB,CAACxN,QAAD,EAAW6E,OAAX,CAAvB2I,IAA8CxN,QAAQ,CAACD,GAAjE;MACA,IAAIgX,CAAC,GAAGxJ,oBAAoB,CAACxN,GAAD,CAA5B;;MACA,IAAI,OAAOgX,CAAP,KAAa,QAAjB,EAA2B;QACzB,OAAOA,CAAP;MACD;IACF;;IACD,OAAO,IAAP;EACD;;EAEDzI,MAAM,GAAG;IACP,IAAIxO,KAAJ,GAAS;MACP,OAAOA,KAAP;IAFK;;IAIP+P,UAJO;IAKP5D,SALO;IAMP0K,uBANO;IAOPjG,QAPO;IAQPgE,KARO;IASPzD,UATO;IAUPzQ,UAVO;IAWPiU,UAXO;IAYPvE,aAZO;IAaPF,OAbO;IAcPgH,yBAAyB,EAAE1H,gBAdpB;IAeP2H,wBAAwB,EAAErH;EAfnB,CAATtB;EAkBA,OAAOA,MAAP;AACD,C,CAAA;AAGD;AACA;AACA;AAEA;AACA;;;AACA,SAASjB,yBAAT,CACE/I,MADF,EAEEW,UAFF,EAGEiS,MAHF,EAGyC;EAAA,IADvCjS,UACuC;IADvCA,UACuC,GADhB,EAAvBA;EACuC;;EAAA,IAAvCiS,MAAuC;IAAvCA,MAAuC,GAAjB,IAAI5L,GAAJ,EAAtB4L;EAAuC;;EAEvC,OAAO5S,MAAM,CAACxF,GAAPwF,CAAW,CAACa,KAAD,EAAQnG,KAAR,KAAiB;IACjC,IAAImY,QAAQ,GAAG,CAAC,GAAGlS,UAAJ,EAAgBjG,KAAhB,CAAf;IACA,IAAI8O,EAAE,GAAG,OAAO3I,KAAK,CAAC2I,EAAb,KAAoB,QAApB,GAA+B3I,KAAK,CAAC2I,EAArC,GAA0CqJ,QAAQ,CAACvN,IAATuN,CAAc,GAAdA,CAAnD;IACA1R,SAAS,CACP,CAACyR,MAAM,CAACjM,GAAPiM,CAAWpJ,EAAXoJ,CADM,EAEP,wCAAqCpJ,EAArC,mBACE,wDAHK,CAATrI;IAKAyR,MAAM,CAACvL,GAAPuL,CAAWpJ,EAAXoJ;;IACA,IAAIE,SAAS,gBACRjS,KADQ;MAEX2I,EAFW;MAGXjI,QAAQ,EAAEV,KAAK,CAACU,QAANV,GACNkI,yBAAyB,CAAClI,KAAK,CAACU,QAAP,EAAiBsR,QAAjB,EAA2BD,MAA3B,CADnB/R,GAENjG;IALO,EAAb;;IAOA,OAAOkY,SAAP;EAhBK,EAAP;AAkBD,C,CAAA;AAGD;;;AACA,SAAStG,wBAAT,CACExN,IADF,EAEEqN,IAFF,EAE8B;EAM5B;EACA,IAAI,CAACA,IAAD,IAAU,EAAE,gBAAgBA,IAAlB,KAA2B,EAAE,cAAcA,IAAhB,CAAzC,EAAiE;IAC/D,OAAO;MAAErN;IAAF,CAAP;EAR0B;;;EAY5B,IAAIqN,IAAI,CAAC7D,UAAL6D,IAAmB,IAAnBA,IAA2BA,IAAI,CAAC7D,UAAL6D,KAAoB,KAAnD,EAA0D;IACxD,OAAO;MACLrN,IADK;MAELuN,UAAU,EAAE;QACV/D,UAAU,EAAE6D,IAAI,CAAC7D,UADP;QAEVC,UAAU,EAAEvM,UAAU,CAAC8C,IAAD,CAFZ;QAGV0J,WAAW,EAAE,KAAI,QAAJ2D,gBAAI,CAAE3D,WAAN,KAAqB,mCAHxB;QAIVC,QAAQ,EAAE0D,IAAI,CAAC1D;MAJL;IAFP,CAAP;EAb0B;;;EAyB5B,IAAI,CAAC0D,IAAI,CAAC1D,QAAV,EAAoB;IAClB,OAAO;MAAE3J;IAAF,CAAP;EA1B0B;;;EA8B5B,IAAI+T,YAAY,GAAG,IAAIC,eAAJ,CAAoBhU,IAAI,CAAC/B,MAAzB,CAAnB;;EACA,KAAK,IAAI,CAACgW,IAAD,EAAOxO,KAAP,CAAT,IAA0B4H,IAAI,CAAC1D,QAA/B,EAAyC;IACvC,IAAI,OAAOlE,KAAP,KAAiB,QAArB,EAA+B;MAC7BsO,YAAY,CAACG,MAAbH,CAAoBE,IAApBF,EAA0BtO,KAA1BsO;IADF,OAEO;MACL,OAAO;QACL/T,IADK;QAELS,KAAK,EAAE,IAAI2I,aAAJ,CACL,GADK,EAEL,aAFK,EAGL,0CAHK;MAFF,CAAP;IAQD;EACF;;EAED,OAAO;IACLpJ,IAAI,eAAOA,IAAP;MAAa/B,MAAM,EAAM8V;IAAzB;EADC,CAAP;AAGD;;AAED,SAASpD,iBAAT,CACEnU,KADF,EAEE2M,QAFF,EAE0B;EAExB,IAAI;IAAEK,UAAF;IAAcC,UAAd;IAA0BC,WAA1B;IAAuCC;EAAvC,IAAoDnN,KAAK,CAAC0O,UAA9D;EACA,IAAIA,UAAU,GAAgC;IAC5C1O,KAAK,EAAE,SADqC;IAE5CE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiByM,QAAQ,CAACzM,QAA1B,CAFoB;IAG5C8M,UAAU,EAAEA,UAAU,IAAI5N,SAHkB;IAI5C6N,UAAU,EAAEA,UAAU,IAAI7N,SAJkB;IAK5C8N,WAAW,EAAEA,WAAW,IAAI9N,SALgB;IAM5C+N,QAAQ,EAAEA,QAAQ,IAAI/N;EANsB,CAA9C;EAQA,OAAOsP,UAAP;AACD;;AAED,SAAS2E,gBAAT,CACErT,KADF,EAEE+E,OAFF,EAGEgM,UAHF,EAIE7Q,QAJF,EAKEmP,sBALF,EAMEC,uBANF,EAOEC,qBAPF,EAQEoC,iBARF,EASET,YATF,EAUErB,gBAVF,EAUyD;EAEvD;EACA;EACA;EACA,IAAI8H,2BAA2B,GAAGzG,YAAY,GAC1CnM,OAAO,CAAC6S,SAAR7S,CAAmBsJ,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQL,EAARK,KAAetG,MAAM,CAACmO,IAAPnO,CAAYmJ,YAAZnJ,EAA0B,CAA1BA,CAAxChD,CAD0C,GAE1CA,OAAO,CAACzF,MAFZ;EAIA,IAAI2V,YAAY,GAAG/D,YAAY,GAC3BnJ,MAAM,CAAC8P,MAAP9P,CAAcmJ,YAAdnJ,EAA4B,CAA5BA,CAD2B,GAE3B4J,iBAAiB,GACjB5J,MAAM,CAAC8P,MAAP9P,CAAc4J,iBAAd5J,EAAiC,CAAjCA,CADiB,GAEjB,IAJJ,CATuD;;EAgBvD,IAAI+P,iBAAiB,GAAG/S,OAAO,CAACmC,MAARnC,CAAe,CAAC8C,KAAD,EAAQ3I,KAAR,KAAiB;IACtD,IAAI,CAAC2I,KAAK,CAACxC,KAANwC,CAAYyG,MAAb,IAAuBpP,KAAK,IAAIyY,2BAApC,EAAiE;MAC/D,OAAO,KAAP;IACD;;IACD,OACEI,WAAW,CAAC/X,KAAK,CAACoO,UAAP,EAAmBpO,KAAK,CAAC+E,OAAN/E,CAAcd,KAAdc,CAAnB,EAAyC6H,KAAzC,CAAXkQ;IAEAzI,uBAAuB,CAACrI,IAAxBqI,CAA8BtB,EAAD,IAAQA,EAAE,KAAKnG,KAAK,CAACxC,KAANwC,CAAYmG,EAAxDsB,CAFAyI,IAGAC,sBAAsB,CACpBhY,KAAK,CAACE,QADc,EAEpBF,KAAK,CAAC+E,OAAN/E,CAAcd,KAAdc,CAFoB,EAGpB+Q,UAHoB,EAIpB7Q,QAJoB,EAKpB2H,KALoB,EAMpBwH,sBANoB,EAOpB4F,YAPoB,CAJxB;EAJsB,EAAxB,CAhBuD;;EAqCvD,IAAI7B,oBAAoB,GAAuC,EAA/D;EACAvD,gBAAgB,CAACzK,OAAjByK,CAAyB,SAAgB5P,GAAhB,KAAuB;IAAA,IAAtB,CAACoC,IAAD,EAAOwF,KAAP,IAAsBoQ,QAC9C;;IACA,IAAI1I,qBAAqB,CAAC2I,QAAtB3I,CAA+BtP,GAA/BsP,CAAJ,EAAyC;MACvC6D,oBAAoB,CAACxS,IAArBwS,CAA0B,CAACnT,GAAD,EAAMoC,IAAN,EAAYwF,KAAZ,CAA1BuL;IADF,OAEO,IAAI/D,sBAAJ,EAA4B;MACjC,IAAI8I,gBAAgB,GAAGH,sBAAsB,CAC3C3V,IAD2C,EAE3CwF,KAF2C,EAG3CkJ,UAH2C,EAI3C1O,IAJ2C,EAK3CwF,KAL2C,EAM3CwH,sBAN2C,EAO3C4F,YAP2C,CAA7C;;MASA,IAAIkD,gBAAJ,EAAsB;QACpB/E,oBAAoB,CAACxS,IAArBwS,CAA0B,CAACnT,GAAD,EAAMoC,IAAN,EAAYwF,KAAZ,CAA1BuL;MACD;IACF;EAjBH;EAoBA,OAAO,CAAC0E,iBAAD,EAAoB1E,oBAApB,CAAP;AACD;;AAED,SAAS2E,WAAT,CACEK,iBADF,EAEEC,YAFF,EAGExQ,KAHF,EAGuB;EAErB,IAAIyQ,KAAK;EAEP,CAACD,YAAD;EAEAxQ,KAAK,CAACxC,KAANwC,CAAYmG,EAAZnG,KAAmBwQ,YAAY,CAAChT,KAAbgT,CAAmBrK,EAJxC,CAFqB;EASrB;;EACA,IAAIuK,aAAa,GAAGH,iBAAiB,CAACvQ,KAAK,CAACxC,KAANwC,CAAYmG,EAAb,CAAjBoK,KAAsChZ,SAA1D,CAVqB;;EAarB,OAAOkZ,KAAK,IAAIC,aAAhB;AACD;;AAED,SAASP,sBAAT,CACEQ,eADF,EAEEH,YAFF,EAGEtH,UAHF,EAIE7Q,QAJF,EAKE2H,KALF,EAMEwH,sBANF,EAOE4F,YAPF,EAOsC;EAAA;;EAEpC,IAAIwD,UAAU,GAAGC,SAAS,CAACF,eAAD,CAA1B;EACA,IAAIG,aAAa,GAAGN,YAAY,CAACrQ,MAAjC;EACA,IAAI4Q,OAAO,GAAGF,SAAS,CAACxY,QAAD,CAAvB;EACA,IAAI2Y,UAAU,GAAGhR,KAAK,CAACG,MAAvB,CALoC;EAQpC;EACA;EACA;EACA;EACA;;EACA,IAAI8Q,uBAAuB;EAEzBT,YAAY,CAACjY,QAAbiY,KAA0BxQ,KAAK,CAACzH,QAAhCiY;EAEA;EACC,sCAAY,CAAChT,KAAbgT,CAAmB7U,IAAnB6U,KAAyBvP,IAAzBuP,GAAyBvP,MAAzBuP,GAAyBvP,+BAAS,GAATA,CAAzB,KACCuP,YAAY,CAACrQ,MAAbqQ,CAAoB,GAApBA,MAA6BxQ,KAAK,CAACG,MAANH,CAAa,GAAbA,CAJ/BwQ;EAMAI,UAAU,CAACrV,QAAXqV,OAA0BG,OAAO,CAACxV,QAARwV,EAN1BP;EAQAI,UAAU,CAAChX,MAAXgX,KAAsBG,OAAO,CAACnX,MAR9B4W;EAUAhJ,sBAZF;;EAcA,IAAIxH,KAAK,CAACxC,KAANwC,CAAYsQ,gBAAhB,EAAkC;IAChC,OAAOtQ,KAAK,CAACxC,KAANwC,CAAYsQ,gBAAZtQ;MACL4Q,UADK;MAELE,aAFK;MAGLC,OAHK;MAILC;IAJK,GAKF9H,UALE;MAMLkE,YANK;MAOL6D;IAPK,GAAP;EASD;;EAED,OAAOA,uBAAP;AACD;;AAED,eAAerG,kBAAf,CACE5K,KADF,EAEE3H,QAFF,EAGEwS,MAHF,EAIE3B,UAJF,EAIyB;EAEvB,IAAIgI,UAAJ;EACA,IAAI3G,MAAJ;;EAEA,IAAI;IACF,IAAIE,IAAI,GAAwBvB,UAAU,GAAG,QAAH,GAAc,QAAxD;IACA,IAAIiI,OAAO,GAAGnR,KAAK,CAACxC,KAANwC,CAAYyK,IAAZzK,CAAd;IACAlC,SAAS,CACPqT,OADO,0BAEe1G,IAFf,yBAEsCzK,KAAK,CAACxC,KAANwC,CAAYmG,EAFlD,GAAT,UAAS,CAATrI;IAKAyM,MAAM,GAAG,MAAM4G,OAAO,CAAC;MACrBhR,MAAM,EAAEH,KAAK,CAACG,MADO;MAErBiR,OAAO,EAAEC,aAAa,CAAChZ,QAAD,EAAW6Q,UAAX,CAFD;MAGrB2B;IAHqB,CAAD,CAAtBN;EARF,EAaE,OAAOnP,CAAP,EAAU;IACV8V,UAAU,GAAGzU,UAAU,CAACL,KAAxB8U;IACA3G,MAAM,GAAGnP,CAATmP;EACD;;EAED,IAAIA,MAAM,YAAY/G,QAAtB,EAAgC;IAAA,yBAC9B;;;IACA,IAAIL,MAAM,GAAGoH,MAAM,CAACpH,MAApB;IACA,IAAI9K,QAAQ,GAAGkS,MAAM,CAACnH,OAAPmH,CAAeqB,GAAfrB,CAAmB,UAAnBA,CAAf;;IACA,IAAIpH,MAAM,IAAI,GAAVA,IAAiBA,MAAM,IAAI,GAA3BA,IAAkC9K,QAAQ,IAAI,IAAlD,EAAwD;MACtD,OAAO;QACLoS,IAAI,EAAEhO,UAAU,CAACqI,QADZ;QAEL3B,MAFK;QAGL9K,QAHK;QAILiR,UAAU,EAAEiB,MAAM,CAACnH,OAAPmH,CAAeqB,GAAfrB,CAAmB,oBAAnBA,MAA6C;MAJpD,CAAP;IAMD;;IAED,IAAIvH,IAAJ;;IACA,2BAAIuH,MAAM,CAACnH,OAAPmH,CAAeqB,GAAfrB,CAAmB,cAAnBA,CAAJ,aAAI+G,mBAAoCzT,WAApC,CAA+C,kBAA/C,CAAJ,EAAwE;MACtEmF,IAAI,GAAG,MAAMuH,MAAM,CAACxH,IAAPwH,EAAbvH;IADF,OAEO;MACLA,IAAI,GAAG,MAAMuH,MAAM,CAACgH,IAAPhH,EAAbvH;IACD;;IAED,IAAIkO,UAAU,KAAKzU,UAAU,CAACL,KAA9B,EAAqC;MACnC,OAAO;QACLqO,IAAI,EAAEyG,UADD;QAEL9U,KAAK,EAAE,IAAI2I,aAAJ,CAAkB5B,MAAlB,EAA0BoH,MAAM,CAACvF,UAAjC,EAA6ChC,IAA7C;MAFF,CAAP;IAID;;IAED,OAAO;MAAEyH,IAAI,EAAEhO,UAAU,CAACuG,IAAnB;MAAyBA;IAAzB,CAAP;EACD;;EAED,IAAIkO,UAAU,KAAKzU,UAAU,CAACL,KAA9B,EAAqC;IACnC,OAAO;MAAEqO,IAAI,EAAEyG,UAAR;MAAoB9U,KAAK,EAAEmO;IAA3B,CAAP;EACD;;EAED,IAAIA,MAAM,YAAY9G,YAAtB,EAAoC;IAClC,OAAO;MAAEgH,IAAI,EAAEhO,UAAU,CAACoI,QAAnB;MAA6B2H,YAAY,EAAEjC;IAA3C,CAAP;EACD;;EAED,OAAO;IAAEE,IAAI,EAAEhO,UAAU,CAACuG,IAAnB;IAAyBA,IAAI,EAAEuH;EAA/B,CAAP;AACD;;AAED,SAAS8G,aAAT,CACEhZ,QADF,EAEE6Q,UAFF,EAEyB;EAEvB,IAAIxO,GAAG,GAAGmW,SAAS,CAACxY,QAAD,CAATwY,CAAoBtV,QAApBsV,EAAV;;EAEA,IAAI,CAAC3H,UAAL,EAAiB;IACf,OAAO,IAAIsI,OAAJ,CAAY9W,GAAZ,CAAP;EACD;;EAED,IAAI;IAAEyK,UAAF;IAAcE,WAAd;IAA2BC;EAA3B,IAAwC4D,UAA5C;EACA,IAAIuI,IAAI,GAAGnM,QAAX,CATuB;EAYvB;;EACA,IAAID,WAAW,KAAK,mCAApB,EAAyD;IACvDoM,IAAI,GAAG,IAAI9B,eAAJ,EAAP8B;;IAEA,KAAK,IAAI,CAACrZ,GAAD,EAAMgJ,KAAN,CAAT,IAAyBkE,QAAQ,CAACpO,OAAToO,EAAzB,EAA6C;MAC3CxH,SAAS,CACP,OAAOsD,KAAP,KAAiB,QADV,EAEP,qFACE,2CAHK,CAATtD;MAKA2T,IAAI,CAAC5B,MAAL4B,CAAYrZ,GAAZqZ,EAAiBrQ,KAAjBqQ;IACD;EAvBoB;;;EA2BvB,OAAO,IAAID,OAAJ,CAAY9W,GAAZ,EAAiB;IACtBgX,MAAM,EAAEvM,UAAU,CAACwM,WAAXxM,EADc;IAEtBsM;EAFsB,CAAjB,CAAP;AAID;;AAED,SAASlF,iBAAT,CACEpU,KADF,EAEE+E,OAFF,EAGEoO,aAHF,EAIEU,OAJF,EAKE3C,YALF,EAMEkC,oBANF,EAOEW,cAPF,EAQEjE,eARF,EAQ4C;EAK1C;EACA,IAAI1B,UAAU,GAA8B,EAA5C;EACA,IAAID,MAAM,GAA0B,IAApC,CAP0C;;EAU1C0F,OAAO,CAACzO,OAARyO,CAAgB,CAACzB,MAAD,EAASlT,KAAT,KAAkB;IAChC,IAAI8O,EAAE,GAAGmF,aAAa,CAACjU,KAAD,CAAbiU,CAAqB9N,KAArB8N,CAA2BnF,EAApC;IACArI,SAAS,CACP,CAACiN,gBAAgB,CAACR,MAAD,CADV,EAEP,qDAFO,CAATzM;;IAIA,IAAIqN,aAAa,CAACZ,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAIa,aAAa,GAAGrB,mBAAmB,CAAC7M,OAAD,EAAUiJ,EAAV,CAAvC;MACA,IAAI/J,KAAK,GAAGmO,MAAM,CAACnO,KAAnB,CAJyB;MAMzB;MACA;;MACA,IAAIiN,YAAJ,EAAkB;QAChBjN,KAAK,GAAG8D,MAAM,CAAC8P,MAAP9P,CAAcmJ,YAAdnJ,EAA4B,CAA5BA,CAAR9D;QACAiN,YAAY,GAAG,IAAfA;MACD;;MACD/C,MAAM,GAAGpG,MAAM,CAAC7D,MAAP6D,CAAcoG,MAAM,IAAI,EAAxBpG,EAA4B;QACnC,CAACkL,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0B/J;MADS,CAA5B8D,CAAToG;IAZF,OAeO,IAAI+E,gBAAgB,CAACd,MAAD,CAApB,EAA8B;MACnCtC,eAAe,CAAC1E,GAAhB0E,CAAoB9B,EAApB8B,EAAwBsC,MAAM,CAACiC,YAA/BvE;MACA1B,UAAU,CAACJ,EAAD,CAAVI,GAAiBgE,MAAM,CAACiC,YAAPjC,CAAoBvH,IAArCuD;IAFK,OAGA;MACLA,UAAU,CAACJ,EAAD,CAAVI,GAAiBgE,MAAM,CAACvH,IAAxBuD;IACD;EA1BH,GAV0C;EAwC1C;;EACA,IAAI8C,YAAJ,EAAkB;IAChB/C,MAAM,GAAG+C,YAAT/C;EA1CwC;;;EA8C1C,KAAK,IAAIjP,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGkU,oBAAoB,CAAC9T,MAAjD,EAAyDJ,KAAK,EAA9D,EAAkE;IAChE,IAAI,CAACe,GAAD,GAAQ4H,KAAR,IAAiBuL,oBAAoB,CAAClU,KAAD,CAAzC;IACA,IAAIkT,MAAM,GAAG2B,cAAc,CAAC7U,KAAD,CAA3B,CAFgE;;IAKhE,IAAI8T,aAAa,CAACZ,MAAD,CAAjB,EAA2B;MAAA;;MACzB,IAAIa,aAAa,GAAGrB,mBAAmB,CAAC5R,KAAK,CAAC+E,OAAP,EAAgB8C,KAAK,CAACxC,KAANwC,CAAYmG,EAA5B,CAAvC;;MACA,IAAI,aAACG,MAAD,aAACsL,OAASxG,cAAa,CAAC5N,KAAd4N,CAAoBjF,EAApBiF,CAAV,CAAJ,EAAuC;QACrC9E,MAAM,gBACDA,MADC;UAEJ,CAAC8E,aAAa,CAAC5N,KAAd4N,CAAoBjF,EAArB,GAA0BoE,MAAM,CAACnO;QAF7B,EAANkK;MAID;;MACDnO,KAAK,CAAC+O,QAAN/O,CAAegM,MAAfhM,CAAsBC,GAAtBD;IARF,OASO,IAAI4S,gBAAgB,CAACR,MAAD,CAApB,EAA8B;MACnC;MACA;MACA,MAAM,IAAIpP,KAAJ,CAAU,yCAAV,CAAN;IAHK,OAIA,IAAIkQ,gBAAgB,CAACd,MAAD,CAApB,EAA8B;MACnC;MACA;MACA,MAAM,IAAIpP,KAAJ,CAAU,iCAAV,CAAN;IAHK,OAIA;MACL,IAAIyS,WAAW,GAA0B;QACvCzV,KAAK,EAAE,MADgC;QAEvC6K,IAAI,EAAEuH,MAAM,CAACvH,IAF0B;QAGvCmC,UAAU,EAAE5N,SAH2B;QAIvC6N,UAAU,EAAE7N,SAJ2B;QAKvC8N,WAAW,EAAE9N,SAL0B;QAMvC+N,QAAQ,EAAE/N;MAN6B,CAAzC;MAQAY,KAAK,CAAC+O,QAAN/O,CAAeoL,GAAfpL,CAAmBC,GAAnBD,EAAwByV,WAAxBzV;IACD;EACF;;EAED,OAAO;IAAEoO,UAAF;IAAcD;EAAd,CAAP;AACD;;AAED,SAASuC,eAAT,CACEtC,UADF,EAEEqC,aAFF,EAGE1L,OAHF,EAG2B;EAEzB,IAAI2U,gBAAgB,GAAQjJ,2BAA5B;;EACA1L,OAAO,CAACK,OAARL,CAAiB8C,KAAD,IAAU;IACxB,IAAImG,EAAE,GAAGnG,KAAK,CAACxC,KAANwC,CAAYmG,EAArB;;IACA,IAAIyC,aAAa,CAACzC,EAAD,CAAbyC,KAAsBrR,SAAtBqR,IAAmCrC,UAAU,CAACJ,EAAD,CAAVI,KAAmBhP,SAA1D,EAAqE;MACnEsa,gBAAgB,CAAC1L,EAAD,CAAhB0L,GAAuBtL,UAAU,CAACJ,EAAD,CAAjC0L;IACD;EAJH;EAMA,OAAOA,gBAAP;AACD,C,CAAA;AAGD;AACA;;;AACA,SAAS9H,mBAAT,CACE7M,OADF,EAEEuP,OAFF,EAEkB;EAEhB,IAAIqF,eAAe,GAAGrF,OAAO,GACzBvP,OAAO,CAACrC,KAARqC,CAAc,CAAdA,EAAiBA,OAAO,CAAC6S,SAAR7S,CAAmBsJ,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQL,EAARK,KAAeiG,OAAxCvP,IAAmD,CAApEA,CADyB,GAEzB,CAAC,GAAGA,OAAJ,CAFJ;EAGA,OACE4U,eAAe,CAACC,OAAhBD,GAA0BE,IAA1BF,CAAgCtL,CAAD,IAAOA,CAAC,CAAChJ,KAAFgJ,CAAQyL,YAA9CH,KAA+D5U,OAAO,CAAC,CAAD,CADxE;AAGD;;AAED,SAASgJ,kBAAT,CAA4BvJ,MAA5B,EAAqD;EAKnD;EACA,IAAIa,KAAK,GAAGb,MAAM,CAACqV,IAAPrV,CACTuV,CAAD,IAAOA,CAAC,CAAC7a,KAAF6a,IAAWA,CAAC,CAACvW,IAAFuW,KAAW,EAAtBA,IAA4BA,CAAC,CAACvW,IAAFuW,KAAW,GADpCvV,KAEP;IACHwJ,EAAE,EAAE;EADD,CAFL;EAMA,OAAO;IACLjJ,OAAO,EAAE,CACP;MACEiD,MAAM,EAAE,EADV;MAEE5H,QAAQ,EAAE,EAFZ;MAGE6H,YAAY,EAAE,EAHhB;MAIE5C;IAJF,CADO,CADJ;IASLA,KATK;IAULpB,KAAK,EAAE,IAAI2I,aAAJ,CAAkB,GAAlB,EAAuB,WAAvB,EAAoC,IAApC;EAVF,CAAP;AAYD,C,CAAA;;;AAGD,SAASsH,YAAT,CAAsBL,OAAtB,EAA2C;EACzC,KAAK,IAAI7O,CAAC,GAAG6O,OAAO,CAACvU,MAARuU,GAAiB,CAA9B,EAAiC7O,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;IAC5C,IAAIoN,MAAM,GAAGyB,OAAO,CAAC7O,CAAD,CAApB;;IACA,IAAI4N,gBAAgB,CAACR,MAAD,CAApB,EAA8B;MAC5B,OAAOA,MAAP;IACD;EACF;AACF,C,CAAA;;;AAGD,SAAS1R,UAAT,CAAoBR,QAApB,EAA4D;EAC1D,OAAO,CAACA,QAAQ,CAACE,QAATF,IAAqB,EAAtB,KAA6BA,QAAQ,CAACuB,MAATvB,IAAmB,EAAhD,CAAP;AACD;;AAED,SAASwR,gBAAT,CAA0BvL,CAA1B,EAAuCC,CAAvC,EAAkD;EAChD,OACED,CAAC,CAAC/F,QAAF+F,KAAeC,CAAC,CAAChG,QAAjB+F,IAA6BA,CAAC,CAAC1E,MAAF0E,KAAaC,CAAC,CAAC3E,MAA5C0E,IAAsDA,CAAC,CAACzE,IAAFyE,KAAWC,CAAC,CAAC1E,IADrE;AAGD;;AAED,SAASwR,gBAAT,CAA0Bd,MAA1B,EAA4C;EAC1C,OAAOA,MAAM,CAACE,IAAPF,KAAgB9N,UAAU,CAACoI,QAAlC;AACD;;AAED,SAASsG,aAAT,CAAuBZ,MAAvB,EAAyC;EACvC,OAAOA,MAAM,CAACE,IAAPF,KAAgB9N,UAAU,CAACL,KAAlC;AACD;;AAED,SAAS2O,gBAAT,CAA0BR,MAA1B,EAA6C;EAC3C,OAAO,OAAM,QAANA,kBAAM,CAAEE,IAAR,MAAiBhO,UAAU,CAACqI,QAAnC;AACD;;AAED,eAAemJ,sBAAf,CACE3C,aADF,EAEEU,OAFF,EAGEnB,MAHF,EAIE0F,iBAJF,EAKEtI,eALF,EAK6C;EAE3C,KAAK,IAAI5Q,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG2U,OAAO,CAACvU,MAApC,EAA4CJ,KAAK,EAAjD,EAAqD;IACnD,IAAIkT,MAAM,GAAGyB,OAAO,CAAC3U,KAAD,CAApB;IACA,IAAI8O,EAAE,GAAGmF,aAAa,CAACjU,KAAD,CAAbiU,CAAqB9N,KAArB8N,CAA2BnF,EAApC,CAFmD;;IAInD,IACEkF,gBAAgB,CAACd,MAAD,CAAhBc,KACC,CAACkF,iBAAD,IAAsBA,iBAAiB,CAACpK,EAAD,CAAjBoK,KAA0BhZ,SADjD8T,CADF,EAGE;MACApD,eAAe,QAAfA,2BAAe,CAAE1E,GAAjB0E,CAAqB9B,EAArB8B,EAAyBsC,MAAM,CAACiC,YAAhCvE;MACA,MAAM4F,mBAAmB,CAACtD,MAAD,EAASM,MAAT,CAAnBgD,CAAoC5J,IAApC4J,CAA0CsE,aAAD,IAAkB;QAC/DlK,eAAe,QAAfA,2BAAe,CAAE9D,MAAjB8D,CAAwB9B,EAAxB8B;;QACA,IAAIkK,aAAJ,EAAmB;UACjBnG,OAAO,CAAC3U,KAAD,CAAP2U,GAAiBmG,aAAjBnG;QACD;MAJG,EAAN;IAMD;EACF;AACF;;AAED,eAAe6B,mBAAf,CACEtD,MADF,EAEEM,MAFF,EAEqB;EAEnB,IAAI,CAACN,MAAM,CAACiC,YAAPjC,CAAoB7F,IAAzB,EAA+B;IAC7B,IAAI0N,OAAO,GAAG,MAAM7H,MAAM,CAACiC,YAAPjC,CAAoBhG,MAApBgG,EAApB;;IACAM,MAAM,CAACtO,gBAAPsO,CAAwB,OAAxBA,EAAiCuH,OAAjCvH;IACA,IAAIwH,UAAU,GAAG,MAAM,IAAIvO,OAAJ,CAAawO,OAAD,IAAY;MAC5C/H,MAAyB,CAACiC,YAA1BjC,CAAuCjG,SAAvCiG,CAAkDO,OAAD,IAAY;QAC5DD,MAAM,CAACrO,mBAAPqO,CAA2B,OAA3BA,EAAoCuH,OAApCvH;;QACA,IAAIC,OAAO,IAAKP,MAAyB,CAACiC,YAA1BjC,CAAuC7F,IAAvD,EAA6D;UAC3D4N,OAAO,CAACxH,OAAD,CAAPwH;QACD;MAJF;IADoB,EAAvB;;IAQA,IAAID,UAAJ,EAAgB;MACd;IACD;EACF;;EACD,OAAO;IAAE5H,IAAI,EAAEhO,UAAU,CAACuG,IAAnB;IAAyBA,IAAI,EAAEuH,MAAM,CAACiC,YAAPjC,CAAoBvH;EAAnD,CAAP;AACD;;AAED,SAASsH,kBAAT,CAA4B1Q,MAA5B,EAA0C;EACxC,OAAO,IAAI+V,eAAJ,CAAoB/V,MAApB,EAA4B2Y,MAA5B,CAAmC,OAAnC,EAA4CnT,IAA5C,CAAkDoF,CAAD,IAAOA,CAAC,KAAK,EAA9D,CAAP;AACD;;AAED,SAASqM,SAAT,CAAmBxY,QAAnB,EAA8C;EAC5C,IAAIgC,IAAI,GACN,OAAOX,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACrB,QAAd,KAA2B,WAA5D,GACIqB,MAAM,CAACrB,QAAPqB,CAAgB8Y,MADpB,GAEI,mBAHN;EAIA,IAAIhY,IAAI,GAAG,OAAOnC,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CQ,UAAU,CAACR,QAAD,CAA/D;EACA,OAAO,IAAIoa,GAAJ,CAAQjY,IAAR,EAAcH,IAAd,CAAP;AACD,C,CAAA;;;;;;;ACptED,SAASqY,kBAAT,CAIqDhX,IAJrD,EAIqD;EAAA,IAJzB;IAC1B3E,cAD0B;IAE1BC;EAF0B,IAIyB0E;EAAA,IADhDiX,UACgD;;EACnD,IAAI/Z,OAAO,GAAGga,mBAAmB,CAAC;IAAE7b,cAAF;IAAkBC;EAAlB,CAAD,CAAjC;EACA,OAAOwO,YAAY;IAAG5M;EAAH,GAAe+Z,UAAf,EAAnB;AACD;;AAED,SAASE,mBAAT,CAGsDC,KAHtD,EAGsD;EAAA,IAHzB;IAC3BpZ;EAD2B,IAGyBoZ;EAAA,IADjDH,UACiD;;EACpD,IAAI/Z,OAAO,GAAGma,oBAAoB,CAAC;IAAErZ;EAAF,CAAD,CAAlC;EACA,OAAO8L,YAAY;IAAG5M;EAAH,GAAe+Z,UAAf,EAAnB;AACD;;AAED,SAASK,gBAAT,CAGmDtH,KAHnD,EAGmD;EAAA,IAHzB;IACxBhS;EADwB,IAGyBgS;EAAA,IAD9CiH,UAC8C;;EACjD,IAAI/Z,OAAO,GAAGqa,iBAAiB,CAAC;IAAEvZ;EAAF,CAAD,CAA/B;EACA,OAAO8L,YAAY;IAAG5M;EAAH,GAAe+Z,UAAf,EAAnB;AACD","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","forEach","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","DeferredData","constructor","Set","cancelled","subscriber","Promise","pendingKeys","add","then","onSettle","delete","DeferredError","_this$subscriber","subscribe","cancel","v","k","done","size","isDeferredError","deferred","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","initialized","router","historyAction","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","HistoryAction","dispose","abort","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","submission","normalizeNavigateOptions","resetScroll","pendingError","revalidate","cancelActiveDeferreds","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","isHashChangeOnly","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","abortFetcher","hasNakedIndexQuery","result","actionMatch","type","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectNavigation","isPush","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferredsViaMatches","_ref3","revalidatingFetcher","get","_state$fetchers$get","abortController","_ref4","results","loaderResults","fetcherResults","callLoadersAndResolveData","_ref5","findRedirect","getLoaderRedirect","processLoaderData","deferredData","routeId","loaderDataKey","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","loadId","loadFetcher","_ref7","staleKey","_ref8","_state$fetchers$get4","_ref9","doneFetcher","resolveDeferredData","fetchersToLoad","all","_ref10","resolveDeferredResults","_ref11","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","boundaryId","foundBoundaryId","isRouteMatched","isRouteLoading","enableScrollRestoration","positions","getPosition","getKey","y","_internalFetchControllers","_internalActiveDeferreds","allIds","treePath","dataRoute","searchParams","URLSearchParams","name","append","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref12","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","resultType","handler","request","createRequest","_result$headers$get","text","Request","body","method","toUpperCase","_errors","mergedLoaderData","eligibleMatches","reverse","find","errorElement","r","successResult","onAbort","wasAborted","resolve","getAll","origin","URL","createMemoryRouter","routerInit","createMemoryHistory","createBrowserRouter","_ref2","createBrowserHistory","createHashRouter","createHashHistory"],"sources":["C:\\xampp\\htdocs\\jobhooks\\node_modules\\@remix-run\\router\\history.ts","C:\\xampp\\htdocs\\jobhooks\\node_modules\\@remix-run\\router\\utils.ts","C:\\xampp\\htdocs\\jobhooks\\node_modules\\@remix-run\\router\\router.ts","C:\\xampp\\htdocs\\jobhooks\\node_modules\\@remix-run\\router\\index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Successful deferred() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DeferredData {\n  private pendingKeys: Set<string> = new Set<string>();\n  private cancelled: boolean = false;\n  private subscriber?: (aborted: boolean, key?: string, data?: any) => void =\n    undefined;\n  data: RouteData = {};\n\n  constructor(data: Record<string, any>) {\n    Object.entries(data).forEach(([key, value]) => {\n      // Store all data in our internal copy and track promise keys\n      this.data[key] = value;\n      if (value instanceof Promise) {\n        this.pendingKeys.add(key);\n        value.then(\n          (data) => this.onSettle(key, null, data),\n          (error) => this.onSettle(key, error)\n        );\n      }\n    });\n  }\n\n  private onSettle(key: string, error: any, data?: any) {\n    if (this.cancelled) {\n      return;\n    }\n    this.pendingKeys.delete(key);\n    let value = error ? new DeferredError(error) : data;\n    this.data[key] = value;\n    this.subscriber?.(false, key, value);\n  }\n\n  subscribe(fn: (aborted: boolean, key?: string, data?: any) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.cancelled = true;\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n}\n\n/**\n * @private\n * Utility class we use to hold deferred promise rejection values\n */\nexport class DeferredError extends Error {}\n\n/**\n * Check if the given error is a DeferredError generated from a deferred()\n * promise rejection\n */\nexport function isDeferredError(e: any): e is DeferredError {\n  return e instanceof DeferredError;\n}\n\nexport function deferred(data: Record<string, any>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath, History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport {\n  DataResult,\n  DataRouteMatch,\n  DataRouteObject,\n  DeferredData,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  RouteObject,\n  Submission,\n  SuccessResult,\n} from \"./utils\";\nimport { ErrorResponse, ResultType, invariant, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * Internal pending DeferredData instances accessed by unit tests\n   * @private\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) ||\n    (init.hydrationData != null && !foundMissingHydrationData);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns deferred() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    // Cancel all pending deferred on revalidations and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingError: RouteData | null = null;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort any in-flight fetcher loads\n    fetchLoadMatches.forEach(([href, match], key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      console.warn(\n        \"You're trying to submit to a route that does not have an action.  To \" +\n          \"fix this, please add an `action` function to the route for \" +\n          `[${createHref(location)}]`\n      );\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n      let isPush = opts?.replace !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds that are not being reused.  Note that if this\n    // is an acton reload we would have already cancelled all pending deferreds\n    // so this would be a no-op\n    cancelActiveDeferredsViaMatches(matches, matchesToLoad);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndResolveData(\n        matchesToLoad,\n        revalidatingFetchers,\n        location,\n        abortController.signal\n      );\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted, loaderDataKey, data) => {\n        if (aborted) {\n          activeDeferreds.delete(routeId);\n          return;\n        }\n        // This will always be defined here, but TS doesn't know that\n        invariant(loaderDataKey, \"Missing loaderDataKey in subscribe\");\n        updateState({\n          loaderData: {\n            ...state.loaderData,\n            [routeId]: {\n              ...state.loaderData[routeId],\n              [loaderDataKey]: data,\n            },\n          },\n        });\n        // Remove this instance if all promises have settled\n        if (deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.set(key, IDLE_FETCHER);\n      updateState({\n        errors: {\n          [boundaryMatch.route.id]: new ErrorResponse(404, \"Not Found\", null),\n        },\n        fetchers: new Map(state.fetchers),\n      });\n      return;\n    }\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort any in-flight fetcher loads\n    fetchLoadMatches.forEach(([href, match], key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      deleteFetcher(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndResolveData(\n        matchesToLoad,\n        revalidatingFetchers,\n        nextLocation,\n        abortController.signal\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, abortController.signal)) || result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    isPush = false\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(\n      isPush ? HistoryAction.Push : HistoryAction.Replace,\n      navigation.location,\n      { overrideNavigation: navigation }\n    );\n  }\n\n  async function callLoadersAndResolveData(\n    matchesToLoad: DataRouteMatch[],\n    fetchersToLoad: [string, string, DataRouteMatch][],\n    location: Location,\n    signal: AbortSignal\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(m, location, signal)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(match, href, signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await resolveDeferredResults(\n      matchesToLoad,\n      loaderResults,\n      signal,\n      state.loaderData,\n      activeDeferreds\n    );\n\n    await resolveDeferredResults(\n      fetchersToLoad.map(([, , match]) => match),\n      fetcherResults,\n      signal\n    );\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Cancel active deferreds that are not reused, being reloaded, or below the\n  // boundary id\n  function cancelActiveDeferredsViaMatches(\n    matches: DataRouteMatch[],\n    matchesToLoad: DataRouteMatch[],\n    boundaryId?: string\n  ): string[] {\n    let foundBoundaryId = false;\n    return cancelActiveDeferreds((routeId) => {\n      foundBoundaryId = foundBoundaryId || routeId === boundaryId;\n      // Can cancel if this route is no longer matched\n      let isRouteMatched = matches?.some((m) => m.route.id === routeId);\n      // Or if this route is about to be reloaded\n      let isRouteLoading = matchesToLoad?.some((m) => m.route.id === routeId);\n      return !isRouteMatched || isRouteLoading || foundBoundaryId;\n    });\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData: RouteData | null,\n  pendingError: RouteData | null,\n  fetchLoadMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingError\n    ? matches.findIndex((m) => m.route.id === Object.keys(pendingError)[0])\n    : matches.length;\n\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      // If this route had a pending deferred cancelled it must be revalidated\n      cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  fetchLoadMatches.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: ResultType.data, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else if (isDeferredResult(result)) {\n      activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: DataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  currentLoaderData?: RouteData,\n  activeDeferreds?: Map<string, DeferredData>\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let id = matchesToLoad[index].route.id;\n    // Not passing currentLoaderData means SSR and we always want to await there\n    if (\n      isDeferredResult(result) &&\n      (!currentLoaderData || currentLoaderData[id] !== undefined)\n    ) {\n      activeDeferreds?.set(id, result.deferredData);\n      await resolveDeferredData(result, signal).then((successResult) => {\n        activeDeferreds?.delete(id);\n        if (successResult) {\n          results[index] = successResult;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal\n): Promise<SuccessResult | undefined> {\n  if (!result.deferredData.done) {\n    let onAbort = () => result.deferredData.cancel();\n    signal.addEventListener(\"abort\", onAbort);\n    let wasAborted = await new Promise((resolve) => {\n      (result as DeferredResult).deferredData.subscribe((aborted) => {\n        signal.removeEventListener(\"abort\", onAbort);\n        if (aborted || (result as DeferredResult).deferredData.done) {\n          resolve(aborted);\n        }\n      });\n    });\n    if (wasAborted) {\n      return;\n    }\n  }\n  return { type: ResultType.data, data: result.deferredData.data };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  DataRouteMatch,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  deferred,\n  generatePath,\n  getToPathname,\n  invariant,\n  isDeferredError,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"]},"metadata":{},"sourceType":"module"}