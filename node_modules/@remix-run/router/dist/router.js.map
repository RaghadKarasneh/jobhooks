{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts","../index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Successful deferred() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DeferredData {\n  private pendingKeys: Set<string> = new Set<string>();\n  private cancelled: boolean = false;\n  private subscriber?: (aborted: boolean, key?: string, data?: any) => void =\n    undefined;\n  data: RouteData = {};\n\n  constructor(data: Record<string, any>) {\n    Object.entries(data).forEach(([key, value]) => {\n      // Store all data in our internal copy and track promise keys\n      this.data[key] = value;\n      if (value instanceof Promise) {\n        this.pendingKeys.add(key);\n        value.then(\n          (data) => this.onSettle(key, null, data),\n          (error) => this.onSettle(key, error)\n        );\n      }\n    });\n  }\n\n  private onSettle(key: string, error: any, data?: any) {\n    if (this.cancelled) {\n      return;\n    }\n    this.pendingKeys.delete(key);\n    let value = error ? new DeferredError(error) : data;\n    this.data[key] = value;\n    this.subscriber?.(false, key, value);\n  }\n\n  subscribe(fn: (aborted: boolean, key?: string, data?: any) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.cancelled = true;\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n}\n\n/**\n * @private\n * Utility class we use to hold deferred promise rejection values\n */\nexport class DeferredError extends Error {}\n\n/**\n * Check if the given error is a DeferredError generated from a deferred()\n * promise rejection\n */\nexport function isDeferredError(e: any): e is DeferredError {\n  return e instanceof DeferredError;\n}\n\nexport function deferred(data: Record<string, any>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath, History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport {\n  DataResult,\n  DataRouteMatch,\n  DataRouteObject,\n  DeferredData,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  RouteObject,\n  Submission,\n  SuccessResult,\n} from \"./utils\";\nimport { ErrorResponse, ResultType, invariant, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * Internal pending DeferredData instances accessed by unit tests\n   * @private\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) ||\n    (init.hydrationData != null && !foundMissingHydrationData);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns deferred() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    // Cancel all pending deferred on revalidations and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingError: RouteData | null = null;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort any in-flight fetcher loads\n    fetchLoadMatches.forEach(([href, match], key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      console.warn(\n        \"You're trying to submit to a route that does not have an action.  To \" +\n          \"fix this, please add an `action` function to the route for \" +\n          `[${createHref(location)}]`\n      );\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n      let isPush = opts?.replace !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds that are not being reused.  Note that if this\n    // is an acton reload we would have already cancelled all pending deferreds\n    // so this would be a no-op\n    cancelActiveDeferredsViaMatches(matches, matchesToLoad);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndResolveData(\n        matchesToLoad,\n        revalidatingFetchers,\n        location,\n        abortController.signal\n      );\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted, loaderDataKey, data) => {\n        if (aborted) {\n          activeDeferreds.delete(routeId);\n          return;\n        }\n        // This will always be defined here, but TS doesn't know that\n        invariant(loaderDataKey, \"Missing loaderDataKey in subscribe\");\n        updateState({\n          loaderData: {\n            ...state.loaderData,\n            [routeId]: {\n              ...state.loaderData[routeId],\n              [loaderDataKey]: data,\n            },\n          },\n        });\n        // Remove this instance if all promises have settled\n        if (deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.set(key, IDLE_FETCHER);\n      updateState({\n        errors: {\n          [boundaryMatch.route.id]: new ErrorResponse(404, \"Not Found\", null),\n        },\n        fetchers: new Map(state.fetchers),\n      });\n      return;\n    }\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Cancel all pending deferred on submissions and mark cancelled routes\n    // for revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort any in-flight fetcher loads\n    fetchLoadMatches.forEach(([href, match], key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      deleteFetcher(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"deferred() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndResolveData(\n        matchesToLoad,\n        revalidatingFetchers,\n        nextLocation,\n        abortController.signal\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, abortController.signal)) || result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    isPush = false\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(\n      isPush ? HistoryAction.Push : HistoryAction.Replace,\n      navigation.location,\n      { overrideNavigation: navigation }\n    );\n  }\n\n  async function callLoadersAndResolveData(\n    matchesToLoad: DataRouteMatch[],\n    fetchersToLoad: [string, string, DataRouteMatch][],\n    location: Location,\n    signal: AbortSignal\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(m, location, signal)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(match, href, signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await resolveDeferredResults(\n      matchesToLoad,\n      loaderResults,\n      signal,\n      state.loaderData,\n      activeDeferreds\n    );\n\n    await resolveDeferredResults(\n      fetchersToLoad.map(([, , match]) => match),\n      fetcherResults,\n      signal\n    );\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Cancel active deferreds that are not reused, being reloaded, or below the\n  // boundary id\n  function cancelActiveDeferredsViaMatches(\n    matches: DataRouteMatch[],\n    matchesToLoad: DataRouteMatch[],\n    boundaryId?: string\n  ): string[] {\n    let foundBoundaryId = false;\n    return cancelActiveDeferreds((routeId) => {\n      foundBoundaryId = foundBoundaryId || routeId === boundaryId;\n      // Can cancel if this route is no longer matched\n      let isRouteMatched = matches?.some((m) => m.route.id === routeId);\n      // Or if this route is about to be reloaded\n      let isRouteLoading = matchesToLoad?.some((m) => m.route.id === routeId);\n      return !isRouteMatched || isRouteLoading || foundBoundaryId;\n    });\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData: RouteData | null,\n  pendingError: RouteData | null,\n  fetchLoadMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingError\n    ? matches.findIndex((m) => m.route.id === Object.keys(pendingError)[0])\n    : matches.length;\n\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      // If this route had a pending deferred cancelled it must be revalidated\n      cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  fetchLoadMatches.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: ResultType.data, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else if (isDeferredResult(result)) {\n      activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: DataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  currentLoaderData?: RouteData,\n  activeDeferreds?: Map<string, DeferredData>\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let id = matchesToLoad[index].route.id;\n    // Not passing currentLoaderData means SSR and we always want to await there\n    if (\n      isDeferredResult(result) &&\n      (!currentLoaderData || currentLoaderData[id] !== undefined)\n    ) {\n      activeDeferreds?.set(id, result.deferredData);\n      await resolveDeferredData(result, signal).then((successResult) => {\n        activeDeferreds?.delete(id);\n        if (successResult) {\n          results[index] = successResult;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal\n): Promise<SuccessResult | undefined> {\n  if (!result.deferredData.done) {\n    let onAbort = () => result.deferredData.cancel();\n    signal.addEventListener(\"abort\", onAbort);\n    let wasAborted = await new Promise((resolve) => {\n      (result as DeferredResult).deferredData.subscribe((aborted) => {\n        signal.removeEventListener(\"abort\", onAbort);\n        if (aborted || (result as DeferredResult).deferredData.done) {\n          resolve(aborted);\n        }\n      });\n    });\n    if (wasAborted) {\n      return;\n    }\n  }\n  return { type: ResultType.data, data: result.deferredData.data };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  DataRouteMatch,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  deferred,\n  generatePath,\n  getToPathname,\n  invariant,\n  isDeferredError,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","forEach","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","DeferredData","constructor","pendingKeys","Set","cancelled","subscriber","Promise","add","then","onSettle","delete","DeferredError","subscribe","cancel","v","k","done","size","isDeferredError","deferred","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","initialized","router","historyAction","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","HistoryAction","dispose","abort","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","submission","normalizeNavigateOptions","resetScroll","pendingError","revalidate","cancelActiveDeferreds","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","isHashChangeOnly","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","abortFetcher","hasNakedIndexQuery","result","actionMatch","type","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectNavigation","isPush","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferredsViaMatches","revalidatingFetcher","get","abortController","results","loaderResults","fetcherResults","callLoadersAndResolveData","findRedirect","getLoaderRedirect","processLoaderData","deferredData","routeId","loaderDataKey","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","fetchersToLoad","all","resolveDeferredResults","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","boundaryId","foundBoundaryId","isRouteMatched","isRouteLoading","enableScrollRestoration","positions","getPosition","getKey","y","_internalFetchControllers","_internalActiveDeferreds","allIds","treePath","dataRoute","searchParams","URLSearchParams","name","append","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","resultType","handler","request","createRequest","text","Request","body","method","toUpperCase","mergedLoaderData","eligibleMatches","reverse","find","errorElement","r","successResult","onAbort","wasAborted","resolve","getAll","origin","URL","createMemoryRouter","routerInit","createBrowserRouter","createHashRouter"],"mappings":"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"}